/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.dingxiang.userservicedriver;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class UserExtendInfo implements org.apache.thrift.TBase<UserExtendInfo, UserExtendInfo._Fields>, java.io.Serializable, Cloneable, Comparable<UserExtendInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserExtendInfo");

  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField YEAR_OF_BIRTH_FIELD_DESC = new org.apache.thrift.protocol.TField("yearOfBirth", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CONSTELLATION_FIELD_DESC = new org.apache.thrift.protocol.TField("constellation", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField REGISTER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("registerType", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField REGISTER_TYPE_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("registerTypeString", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField NOW_PLACE_FIELD_DESC = new org.apache.thrift.protocol.TField("nowPlace", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField NOW_PLACE_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("nowPlaceString", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField PROFESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("profession", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField PROFESSION_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("professionString", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField NATIVE_PLACE_FIELD_DESC = new org.apache.thrift.protocol.TField("nativePlace", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField NATIVE_PLACE_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("nativePlaceString", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField NATION_FIELD_DESC = new org.apache.thrift.protocol.TField("nation", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField NATION_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("nationString", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField BELIFE_FIELD_DESC = new org.apache.thrift.protocol.TField("belife", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField BELIFE_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("belifeString", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField IDENTITY_CARD_FIELD_DESC = new org.apache.thrift.protocol.TField("identityCard", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField PASSPORT_FIELD_DESC = new org.apache.thrift.protocol.TField("passport", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField OFFICERS_CARD_FIELD_DESC = new org.apache.thrift.protocol.TField("officersCard", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField CERTIFICATE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("certificateType", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField CERTIFICATE_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("certificateValue", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField YEAR_OF_BIRTH_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("yearOfBirthString", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField CONSTELLATION_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("constellationString", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField MEMBER_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("memberLevel", org.apache.thrift.protocol.TType.I32, (short)25);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserExtendInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserExtendInfoTupleSchemeFactory());
  }

  public String userId; // required
  public String yearOfBirth; // required
  public String constellation; // required
  /**
   * 
   * @see RegisterTypeEnum
   */
  public RegisterTypeEnum registerType; // required
  public String registerTypeString; // required
  public String nowPlace; // required
  public String nowPlaceString; // required
  public String profession; // required
  public String professionString; // required
  public String nativePlace; // required
  public String nativePlaceString; // required
  public String nation; // required
  public String nationString; // required
  public String belife; // required
  public String belifeString; // required
  public String description; // required
  public String identityCard; // required
  public String passport; // required
  public String officersCard; // required
  /**
   * 
   * @see CertificateTypeEnum
   */
  public CertificateTypeEnum certificateType; // required
  public String certificateValue; // required
  public String email; // required
  public String yearOfBirthString; // required
  public String constellationString; // required
  public int memberLevel; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_ID((short)1, "userId"),
    YEAR_OF_BIRTH((short)2, "yearOfBirth"),
    CONSTELLATION((short)3, "constellation"),
    /**
     * 
     * @see RegisterTypeEnum
     */
    REGISTER_TYPE((short)4, "registerType"),
    REGISTER_TYPE_STRING((short)5, "registerTypeString"),
    NOW_PLACE((short)6, "nowPlace"),
    NOW_PLACE_STRING((short)7, "nowPlaceString"),
    PROFESSION((short)8, "profession"),
    PROFESSION_STRING((short)9, "professionString"),
    NATIVE_PLACE((short)10, "nativePlace"),
    NATIVE_PLACE_STRING((short)11, "nativePlaceString"),
    NATION((short)12, "nation"),
    NATION_STRING((short)13, "nationString"),
    BELIFE((short)14, "belife"),
    BELIFE_STRING((short)15, "belifeString"),
    DESCRIPTION((short)16, "description"),
    IDENTITY_CARD((short)17, "identityCard"),
    PASSPORT((short)18, "passport"),
    OFFICERS_CARD((short)19, "officersCard"),
    /**
     * 
     * @see CertificateTypeEnum
     */
    CERTIFICATE_TYPE((short)20, "certificateType"),
    CERTIFICATE_VALUE((short)21, "certificateValue"),
    EMAIL((short)22, "email"),
    YEAR_OF_BIRTH_STRING((short)23, "yearOfBirthString"),
    CONSTELLATION_STRING((short)24, "constellationString"),
    MEMBER_LEVEL((short)25, "memberLevel");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_ID
          return USER_ID;
        case 2: // YEAR_OF_BIRTH
          return YEAR_OF_BIRTH;
        case 3: // CONSTELLATION
          return CONSTELLATION;
        case 4: // REGISTER_TYPE
          return REGISTER_TYPE;
        case 5: // REGISTER_TYPE_STRING
          return REGISTER_TYPE_STRING;
        case 6: // NOW_PLACE
          return NOW_PLACE;
        case 7: // NOW_PLACE_STRING
          return NOW_PLACE_STRING;
        case 8: // PROFESSION
          return PROFESSION;
        case 9: // PROFESSION_STRING
          return PROFESSION_STRING;
        case 10: // NATIVE_PLACE
          return NATIVE_PLACE;
        case 11: // NATIVE_PLACE_STRING
          return NATIVE_PLACE_STRING;
        case 12: // NATION
          return NATION;
        case 13: // NATION_STRING
          return NATION_STRING;
        case 14: // BELIFE
          return BELIFE;
        case 15: // BELIFE_STRING
          return BELIFE_STRING;
        case 16: // DESCRIPTION
          return DESCRIPTION;
        case 17: // IDENTITY_CARD
          return IDENTITY_CARD;
        case 18: // PASSPORT
          return PASSPORT;
        case 19: // OFFICERS_CARD
          return OFFICERS_CARD;
        case 20: // CERTIFICATE_TYPE
          return CERTIFICATE_TYPE;
        case 21: // CERTIFICATE_VALUE
          return CERTIFICATE_VALUE;
        case 22: // EMAIL
          return EMAIL;
        case 23: // YEAR_OF_BIRTH_STRING
          return YEAR_OF_BIRTH_STRING;
        case 24: // CONSTELLATION_STRING
          return CONSTELLATION_STRING;
        case 25: // MEMBER_LEVEL
          return MEMBER_LEVEL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MEMBERLEVEL_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.YEAR_OF_BIRTH, new org.apache.thrift.meta_data.FieldMetaData("yearOfBirth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONSTELLATION, new org.apache.thrift.meta_data.FieldMetaData("constellation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REGISTER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("registerType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, RegisterTypeEnum.class)));
    tmpMap.put(_Fields.REGISTER_TYPE_STRING, new org.apache.thrift.meta_data.FieldMetaData("registerTypeString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NOW_PLACE, new org.apache.thrift.meta_data.FieldMetaData("nowPlace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NOW_PLACE_STRING, new org.apache.thrift.meta_data.FieldMetaData("nowPlaceString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROFESSION, new org.apache.thrift.meta_data.FieldMetaData("profession", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROFESSION_STRING, new org.apache.thrift.meta_data.FieldMetaData("professionString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NATIVE_PLACE, new org.apache.thrift.meta_data.FieldMetaData("nativePlace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NATIVE_PLACE_STRING, new org.apache.thrift.meta_data.FieldMetaData("nativePlaceString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NATION, new org.apache.thrift.meta_data.FieldMetaData("nation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NATION_STRING, new org.apache.thrift.meta_data.FieldMetaData("nationString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BELIFE, new org.apache.thrift.meta_data.FieldMetaData("belife", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BELIFE_STRING, new org.apache.thrift.meta_data.FieldMetaData("belifeString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IDENTITY_CARD, new org.apache.thrift.meta_data.FieldMetaData("identityCard", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PASSPORT, new org.apache.thrift.meta_data.FieldMetaData("passport", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OFFICERS_CARD, new org.apache.thrift.meta_data.FieldMetaData("officersCard", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CERTIFICATE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("certificateType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CertificateTypeEnum.class)));
    tmpMap.put(_Fields.CERTIFICATE_VALUE, new org.apache.thrift.meta_data.FieldMetaData("certificateValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.YEAR_OF_BIRTH_STRING, new org.apache.thrift.meta_data.FieldMetaData("yearOfBirthString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONSTELLATION_STRING, new org.apache.thrift.meta_data.FieldMetaData("constellationString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEMBER_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("memberLevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserExtendInfo.class, metaDataMap);
  }

  public UserExtendInfo() {
  }

  public UserExtendInfo(
    String userId,
    String yearOfBirth,
    String constellation,
    RegisterTypeEnum registerType,
    String registerTypeString,
    String nowPlace,
    String nowPlaceString,
    String profession,
    String professionString,
    String nativePlace,
    String nativePlaceString,
    String nation,
    String nationString,
    String belife,
    String belifeString,
    String description,
    String identityCard,
    String passport,
    String officersCard,
    CertificateTypeEnum certificateType,
    String certificateValue,
    String email,
    String yearOfBirthString,
    String constellationString,
    int memberLevel)
  {
    this();
    this.userId = userId;
    this.yearOfBirth = yearOfBirth;
    this.constellation = constellation;
    this.registerType = registerType;
    this.registerTypeString = registerTypeString;
    this.nowPlace = nowPlace;
    this.nowPlaceString = nowPlaceString;
    this.profession = profession;
    this.professionString = professionString;
    this.nativePlace = nativePlace;
    this.nativePlaceString = nativePlaceString;
    this.nation = nation;
    this.nationString = nationString;
    this.belife = belife;
    this.belifeString = belifeString;
    this.description = description;
    this.identityCard = identityCard;
    this.passport = passport;
    this.officersCard = officersCard;
    this.certificateType = certificateType;
    this.certificateValue = certificateValue;
    this.email = email;
    this.yearOfBirthString = yearOfBirthString;
    this.constellationString = constellationString;
    this.memberLevel = memberLevel;
    setMemberLevelIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserExtendInfo(UserExtendInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetUserId()) {
      this.userId = other.userId;
    }
    if (other.isSetYearOfBirth()) {
      this.yearOfBirth = other.yearOfBirth;
    }
    if (other.isSetConstellation()) {
      this.constellation = other.constellation;
    }
    if (other.isSetRegisterType()) {
      this.registerType = other.registerType;
    }
    if (other.isSetRegisterTypeString()) {
      this.registerTypeString = other.registerTypeString;
    }
    if (other.isSetNowPlace()) {
      this.nowPlace = other.nowPlace;
    }
    if (other.isSetNowPlaceString()) {
      this.nowPlaceString = other.nowPlaceString;
    }
    if (other.isSetProfession()) {
      this.profession = other.profession;
    }
    if (other.isSetProfessionString()) {
      this.professionString = other.professionString;
    }
    if (other.isSetNativePlace()) {
      this.nativePlace = other.nativePlace;
    }
    if (other.isSetNativePlaceString()) {
      this.nativePlaceString = other.nativePlaceString;
    }
    if (other.isSetNation()) {
      this.nation = other.nation;
    }
    if (other.isSetNationString()) {
      this.nationString = other.nationString;
    }
    if (other.isSetBelife()) {
      this.belife = other.belife;
    }
    if (other.isSetBelifeString()) {
      this.belifeString = other.belifeString;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    if (other.isSetIdentityCard()) {
      this.identityCard = other.identityCard;
    }
    if (other.isSetPassport()) {
      this.passport = other.passport;
    }
    if (other.isSetOfficersCard()) {
      this.officersCard = other.officersCard;
    }
    if (other.isSetCertificateType()) {
      this.certificateType = other.certificateType;
    }
    if (other.isSetCertificateValue()) {
      this.certificateValue = other.certificateValue;
    }
    if (other.isSetEmail()) {
      this.email = other.email;
    }
    if (other.isSetYearOfBirthString()) {
      this.yearOfBirthString = other.yearOfBirthString;
    }
    if (other.isSetConstellationString()) {
      this.constellationString = other.constellationString;
    }
    this.memberLevel = other.memberLevel;
  }

  public UserExtendInfo deepCopy() {
    return new UserExtendInfo(this);
  }

  @Override
  public void clear() {
    this.userId = null;
    this.yearOfBirth = null;
    this.constellation = null;
    this.registerType = null;
    this.registerTypeString = null;
    this.nowPlace = null;
    this.nowPlaceString = null;
    this.profession = null;
    this.professionString = null;
    this.nativePlace = null;
    this.nativePlaceString = null;
    this.nation = null;
    this.nationString = null;
    this.belife = null;
    this.belifeString = null;
    this.description = null;
    this.identityCard = null;
    this.passport = null;
    this.officersCard = null;
    this.certificateType = null;
    this.certificateValue = null;
    this.email = null;
    this.yearOfBirthString = null;
    this.constellationString = null;
    setMemberLevelIsSet(false);
    this.memberLevel = 0;
  }

  public String getUserId() {
    return this.userId;
  }

  public UserExtendInfo setUserId(String userId) {
    this.userId = userId;
    return this;
  }

  public void unsetUserId() {
    this.userId = null;
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return this.userId != null;
  }

  public void setUserIdIsSet(boolean value) {
    if (!value) {
      this.userId = null;
    }
  }

  public String getYearOfBirth() {
    return this.yearOfBirth;
  }

  public UserExtendInfo setYearOfBirth(String yearOfBirth) {
    this.yearOfBirth = yearOfBirth;
    return this;
  }

  public void unsetYearOfBirth() {
    this.yearOfBirth = null;
  }

  /** Returns true if field yearOfBirth is set (has been assigned a value) and false otherwise */
  public boolean isSetYearOfBirth() {
    return this.yearOfBirth != null;
  }

  public void setYearOfBirthIsSet(boolean value) {
    if (!value) {
      this.yearOfBirth = null;
    }
  }

  public String getConstellation() {
    return this.constellation;
  }

  public UserExtendInfo setConstellation(String constellation) {
    this.constellation = constellation;
    return this;
  }

  public void unsetConstellation() {
    this.constellation = null;
  }

  /** Returns true if field constellation is set (has been assigned a value) and false otherwise */
  public boolean isSetConstellation() {
    return this.constellation != null;
  }

  public void setConstellationIsSet(boolean value) {
    if (!value) {
      this.constellation = null;
    }
  }

  /**
   * 
   * @see RegisterTypeEnum
   */
  public RegisterTypeEnum getRegisterType() {
    return this.registerType;
  }

  /**
   * 
   * @see RegisterTypeEnum
   */
  public UserExtendInfo setRegisterType(RegisterTypeEnum registerType) {
    this.registerType = registerType;
    return this;
  }

  public void unsetRegisterType() {
    this.registerType = null;
  }

  /** Returns true if field registerType is set (has been assigned a value) and false otherwise */
  public boolean isSetRegisterType() {
    return this.registerType != null;
  }

  public void setRegisterTypeIsSet(boolean value) {
    if (!value) {
      this.registerType = null;
    }
  }

  public String getRegisterTypeString() {
    return this.registerTypeString;
  }

  public UserExtendInfo setRegisterTypeString(String registerTypeString) {
    this.registerTypeString = registerTypeString;
    return this;
  }

  public void unsetRegisterTypeString() {
    this.registerTypeString = null;
  }

  /** Returns true if field registerTypeString is set (has been assigned a value) and false otherwise */
  public boolean isSetRegisterTypeString() {
    return this.registerTypeString != null;
  }

  public void setRegisterTypeStringIsSet(boolean value) {
    if (!value) {
      this.registerTypeString = null;
    }
  }

  public String getNowPlace() {
    return this.nowPlace;
  }

  public UserExtendInfo setNowPlace(String nowPlace) {
    this.nowPlace = nowPlace;
    return this;
  }

  public void unsetNowPlace() {
    this.nowPlace = null;
  }

  /** Returns true if field nowPlace is set (has been assigned a value) and false otherwise */
  public boolean isSetNowPlace() {
    return this.nowPlace != null;
  }

  public void setNowPlaceIsSet(boolean value) {
    if (!value) {
      this.nowPlace = null;
    }
  }

  public String getNowPlaceString() {
    return this.nowPlaceString;
  }

  public UserExtendInfo setNowPlaceString(String nowPlaceString) {
    this.nowPlaceString = nowPlaceString;
    return this;
  }

  public void unsetNowPlaceString() {
    this.nowPlaceString = null;
  }

  /** Returns true if field nowPlaceString is set (has been assigned a value) and false otherwise */
  public boolean isSetNowPlaceString() {
    return this.nowPlaceString != null;
  }

  public void setNowPlaceStringIsSet(boolean value) {
    if (!value) {
      this.nowPlaceString = null;
    }
  }

  public String getProfession() {
    return this.profession;
  }

  public UserExtendInfo setProfession(String profession) {
    this.profession = profession;
    return this;
  }

  public void unsetProfession() {
    this.profession = null;
  }

  /** Returns true if field profession is set (has been assigned a value) and false otherwise */
  public boolean isSetProfession() {
    return this.profession != null;
  }

  public void setProfessionIsSet(boolean value) {
    if (!value) {
      this.profession = null;
    }
  }

  public String getProfessionString() {
    return this.professionString;
  }

  public UserExtendInfo setProfessionString(String professionString) {
    this.professionString = professionString;
    return this;
  }

  public void unsetProfessionString() {
    this.professionString = null;
  }

  /** Returns true if field professionString is set (has been assigned a value) and false otherwise */
  public boolean isSetProfessionString() {
    return this.professionString != null;
  }

  public void setProfessionStringIsSet(boolean value) {
    if (!value) {
      this.professionString = null;
    }
  }

  public String getNativePlace() {
    return this.nativePlace;
  }

  public UserExtendInfo setNativePlace(String nativePlace) {
    this.nativePlace = nativePlace;
    return this;
  }

  public void unsetNativePlace() {
    this.nativePlace = null;
  }

  /** Returns true if field nativePlace is set (has been assigned a value) and false otherwise */
  public boolean isSetNativePlace() {
    return this.nativePlace != null;
  }

  public void setNativePlaceIsSet(boolean value) {
    if (!value) {
      this.nativePlace = null;
    }
  }

  public String getNativePlaceString() {
    return this.nativePlaceString;
  }

  public UserExtendInfo setNativePlaceString(String nativePlaceString) {
    this.nativePlaceString = nativePlaceString;
    return this;
  }

  public void unsetNativePlaceString() {
    this.nativePlaceString = null;
  }

  /** Returns true if field nativePlaceString is set (has been assigned a value) and false otherwise */
  public boolean isSetNativePlaceString() {
    return this.nativePlaceString != null;
  }

  public void setNativePlaceStringIsSet(boolean value) {
    if (!value) {
      this.nativePlaceString = null;
    }
  }

  public String getNation() {
    return this.nation;
  }

  public UserExtendInfo setNation(String nation) {
    this.nation = nation;
    return this;
  }

  public void unsetNation() {
    this.nation = null;
  }

  /** Returns true if field nation is set (has been assigned a value) and false otherwise */
  public boolean isSetNation() {
    return this.nation != null;
  }

  public void setNationIsSet(boolean value) {
    if (!value) {
      this.nation = null;
    }
  }

  public String getNationString() {
    return this.nationString;
  }

  public UserExtendInfo setNationString(String nationString) {
    this.nationString = nationString;
    return this;
  }

  public void unsetNationString() {
    this.nationString = null;
  }

  /** Returns true if field nationString is set (has been assigned a value) and false otherwise */
  public boolean isSetNationString() {
    return this.nationString != null;
  }

  public void setNationStringIsSet(boolean value) {
    if (!value) {
      this.nationString = null;
    }
  }

  public String getBelife() {
    return this.belife;
  }

  public UserExtendInfo setBelife(String belife) {
    this.belife = belife;
    return this;
  }

  public void unsetBelife() {
    this.belife = null;
  }

  /** Returns true if field belife is set (has been assigned a value) and false otherwise */
  public boolean isSetBelife() {
    return this.belife != null;
  }

  public void setBelifeIsSet(boolean value) {
    if (!value) {
      this.belife = null;
    }
  }

  public String getBelifeString() {
    return this.belifeString;
  }

  public UserExtendInfo setBelifeString(String belifeString) {
    this.belifeString = belifeString;
    return this;
  }

  public void unsetBelifeString() {
    this.belifeString = null;
  }

  /** Returns true if field belifeString is set (has been assigned a value) and false otherwise */
  public boolean isSetBelifeString() {
    return this.belifeString != null;
  }

  public void setBelifeStringIsSet(boolean value) {
    if (!value) {
      this.belifeString = null;
    }
  }

  public String getDescription() {
    return this.description;
  }

  public UserExtendInfo setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public String getIdentityCard() {
    return this.identityCard;
  }

  public UserExtendInfo setIdentityCard(String identityCard) {
    this.identityCard = identityCard;
    return this;
  }

  public void unsetIdentityCard() {
    this.identityCard = null;
  }

  /** Returns true if field identityCard is set (has been assigned a value) and false otherwise */
  public boolean isSetIdentityCard() {
    return this.identityCard != null;
  }

  public void setIdentityCardIsSet(boolean value) {
    if (!value) {
      this.identityCard = null;
    }
  }

  public String getPassport() {
    return this.passport;
  }

  public UserExtendInfo setPassport(String passport) {
    this.passport = passport;
    return this;
  }

  public void unsetPassport() {
    this.passport = null;
  }

  /** Returns true if field passport is set (has been assigned a value) and false otherwise */
  public boolean isSetPassport() {
    return this.passport != null;
  }

  public void setPassportIsSet(boolean value) {
    if (!value) {
      this.passport = null;
    }
  }

  public String getOfficersCard() {
    return this.officersCard;
  }

  public UserExtendInfo setOfficersCard(String officersCard) {
    this.officersCard = officersCard;
    return this;
  }

  public void unsetOfficersCard() {
    this.officersCard = null;
  }

  /** Returns true if field officersCard is set (has been assigned a value) and false otherwise */
  public boolean isSetOfficersCard() {
    return this.officersCard != null;
  }

  public void setOfficersCardIsSet(boolean value) {
    if (!value) {
      this.officersCard = null;
    }
  }

  /**
   * 
   * @see CertificateTypeEnum
   */
  public CertificateTypeEnum getCertificateType() {
    return this.certificateType;
  }

  /**
   * 
   * @see CertificateTypeEnum
   */
  public UserExtendInfo setCertificateType(CertificateTypeEnum certificateType) {
    this.certificateType = certificateType;
    return this;
  }

  public void unsetCertificateType() {
    this.certificateType = null;
  }

  /** Returns true if field certificateType is set (has been assigned a value) and false otherwise */
  public boolean isSetCertificateType() {
    return this.certificateType != null;
  }

  public void setCertificateTypeIsSet(boolean value) {
    if (!value) {
      this.certificateType = null;
    }
  }

  public String getCertificateValue() {
    return this.certificateValue;
  }

  public UserExtendInfo setCertificateValue(String certificateValue) {
    this.certificateValue = certificateValue;
    return this;
  }

  public void unsetCertificateValue() {
    this.certificateValue = null;
  }

  /** Returns true if field certificateValue is set (has been assigned a value) and false otherwise */
  public boolean isSetCertificateValue() {
    return this.certificateValue != null;
  }

  public void setCertificateValueIsSet(boolean value) {
    if (!value) {
      this.certificateValue = null;
    }
  }

  public String getEmail() {
    return this.email;
  }

  public UserExtendInfo setEmail(String email) {
    this.email = email;
    return this;
  }

  public void unsetEmail() {
    this.email = null;
  }

  /** Returns true if field email is set (has been assigned a value) and false otherwise */
  public boolean isSetEmail() {
    return this.email != null;
  }

  public void setEmailIsSet(boolean value) {
    if (!value) {
      this.email = null;
    }
  }

  public String getYearOfBirthString() {
    return this.yearOfBirthString;
  }

  public UserExtendInfo setYearOfBirthString(String yearOfBirthString) {
    this.yearOfBirthString = yearOfBirthString;
    return this;
  }

  public void unsetYearOfBirthString() {
    this.yearOfBirthString = null;
  }

  /** Returns true if field yearOfBirthString is set (has been assigned a value) and false otherwise */
  public boolean isSetYearOfBirthString() {
    return this.yearOfBirthString != null;
  }

  public void setYearOfBirthStringIsSet(boolean value) {
    if (!value) {
      this.yearOfBirthString = null;
    }
  }

  public String getConstellationString() {
    return this.constellationString;
  }

  public UserExtendInfo setConstellationString(String constellationString) {
    this.constellationString = constellationString;
    return this;
  }

  public void unsetConstellationString() {
    this.constellationString = null;
  }

  /** Returns true if field constellationString is set (has been assigned a value) and false otherwise */
  public boolean isSetConstellationString() {
    return this.constellationString != null;
  }

  public void setConstellationStringIsSet(boolean value) {
    if (!value) {
      this.constellationString = null;
    }
  }

  public int getMemberLevel() {
    return this.memberLevel;
  }

  public UserExtendInfo setMemberLevel(int memberLevel) {
    this.memberLevel = memberLevel;
    setMemberLevelIsSet(true);
    return this;
  }

  public void unsetMemberLevel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMBERLEVEL_ISSET_ID);
  }

  /** Returns true if field memberLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetMemberLevel() {
    return EncodingUtils.testBit(__isset_bitfield, __MEMBERLEVEL_ISSET_ID);
  }

  public void setMemberLevelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMBERLEVEL_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((String)value);
      }
      break;

    case YEAR_OF_BIRTH:
      if (value == null) {
        unsetYearOfBirth();
      } else {
        setYearOfBirth((String)value);
      }
      break;

    case CONSTELLATION:
      if (value == null) {
        unsetConstellation();
      } else {
        setConstellation((String)value);
      }
      break;

    case REGISTER_TYPE:
      if (value == null) {
        unsetRegisterType();
      } else {
        setRegisterType((RegisterTypeEnum)value);
      }
      break;

    case REGISTER_TYPE_STRING:
      if (value == null) {
        unsetRegisterTypeString();
      } else {
        setRegisterTypeString((String)value);
      }
      break;

    case NOW_PLACE:
      if (value == null) {
        unsetNowPlace();
      } else {
        setNowPlace((String)value);
      }
      break;

    case NOW_PLACE_STRING:
      if (value == null) {
        unsetNowPlaceString();
      } else {
        setNowPlaceString((String)value);
      }
      break;

    case PROFESSION:
      if (value == null) {
        unsetProfession();
      } else {
        setProfession((String)value);
      }
      break;

    case PROFESSION_STRING:
      if (value == null) {
        unsetProfessionString();
      } else {
        setProfessionString((String)value);
      }
      break;

    case NATIVE_PLACE:
      if (value == null) {
        unsetNativePlace();
      } else {
        setNativePlace((String)value);
      }
      break;

    case NATIVE_PLACE_STRING:
      if (value == null) {
        unsetNativePlaceString();
      } else {
        setNativePlaceString((String)value);
      }
      break;

    case NATION:
      if (value == null) {
        unsetNation();
      } else {
        setNation((String)value);
      }
      break;

    case NATION_STRING:
      if (value == null) {
        unsetNationString();
      } else {
        setNationString((String)value);
      }
      break;

    case BELIFE:
      if (value == null) {
        unsetBelife();
      } else {
        setBelife((String)value);
      }
      break;

    case BELIFE_STRING:
      if (value == null) {
        unsetBelifeString();
      } else {
        setBelifeString((String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case IDENTITY_CARD:
      if (value == null) {
        unsetIdentityCard();
      } else {
        setIdentityCard((String)value);
      }
      break;

    case PASSPORT:
      if (value == null) {
        unsetPassport();
      } else {
        setPassport((String)value);
      }
      break;

    case OFFICERS_CARD:
      if (value == null) {
        unsetOfficersCard();
      } else {
        setOfficersCard((String)value);
      }
      break;

    case CERTIFICATE_TYPE:
      if (value == null) {
        unsetCertificateType();
      } else {
        setCertificateType((CertificateTypeEnum)value);
      }
      break;

    case CERTIFICATE_VALUE:
      if (value == null) {
        unsetCertificateValue();
      } else {
        setCertificateValue((String)value);
      }
      break;

    case EMAIL:
      if (value == null) {
        unsetEmail();
      } else {
        setEmail((String)value);
      }
      break;

    case YEAR_OF_BIRTH_STRING:
      if (value == null) {
        unsetYearOfBirthString();
      } else {
        setYearOfBirthString((String)value);
      }
      break;

    case CONSTELLATION_STRING:
      if (value == null) {
        unsetConstellationString();
      } else {
        setConstellationString((String)value);
      }
      break;

    case MEMBER_LEVEL:
      if (value == null) {
        unsetMemberLevel();
      } else {
        setMemberLevel((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_ID:
      return getUserId();

    case YEAR_OF_BIRTH:
      return getYearOfBirth();

    case CONSTELLATION:
      return getConstellation();

    case REGISTER_TYPE:
      return getRegisterType();

    case REGISTER_TYPE_STRING:
      return getRegisterTypeString();

    case NOW_PLACE:
      return getNowPlace();

    case NOW_PLACE_STRING:
      return getNowPlaceString();

    case PROFESSION:
      return getProfession();

    case PROFESSION_STRING:
      return getProfessionString();

    case NATIVE_PLACE:
      return getNativePlace();

    case NATIVE_PLACE_STRING:
      return getNativePlaceString();

    case NATION:
      return getNation();

    case NATION_STRING:
      return getNationString();

    case BELIFE:
      return getBelife();

    case BELIFE_STRING:
      return getBelifeString();

    case DESCRIPTION:
      return getDescription();

    case IDENTITY_CARD:
      return getIdentityCard();

    case PASSPORT:
      return getPassport();

    case OFFICERS_CARD:
      return getOfficersCard();

    case CERTIFICATE_TYPE:
      return getCertificateType();

    case CERTIFICATE_VALUE:
      return getCertificateValue();

    case EMAIL:
      return getEmail();

    case YEAR_OF_BIRTH_STRING:
      return getYearOfBirthString();

    case CONSTELLATION_STRING:
      return getConstellationString();

    case MEMBER_LEVEL:
      return Integer.valueOf(getMemberLevel());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_ID:
      return isSetUserId();
    case YEAR_OF_BIRTH:
      return isSetYearOfBirth();
    case CONSTELLATION:
      return isSetConstellation();
    case REGISTER_TYPE:
      return isSetRegisterType();
    case REGISTER_TYPE_STRING:
      return isSetRegisterTypeString();
    case NOW_PLACE:
      return isSetNowPlace();
    case NOW_PLACE_STRING:
      return isSetNowPlaceString();
    case PROFESSION:
      return isSetProfession();
    case PROFESSION_STRING:
      return isSetProfessionString();
    case NATIVE_PLACE:
      return isSetNativePlace();
    case NATIVE_PLACE_STRING:
      return isSetNativePlaceString();
    case NATION:
      return isSetNation();
    case NATION_STRING:
      return isSetNationString();
    case BELIFE:
      return isSetBelife();
    case BELIFE_STRING:
      return isSetBelifeString();
    case DESCRIPTION:
      return isSetDescription();
    case IDENTITY_CARD:
      return isSetIdentityCard();
    case PASSPORT:
      return isSetPassport();
    case OFFICERS_CARD:
      return isSetOfficersCard();
    case CERTIFICATE_TYPE:
      return isSetCertificateType();
    case CERTIFICATE_VALUE:
      return isSetCertificateValue();
    case EMAIL:
      return isSetEmail();
    case YEAR_OF_BIRTH_STRING:
      return isSetYearOfBirthString();
    case CONSTELLATION_STRING:
      return isSetConstellationString();
    case MEMBER_LEVEL:
      return isSetMemberLevel();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserExtendInfo)
      return this.equals((UserExtendInfo)that);
    return false;
  }

  public boolean equals(UserExtendInfo that) {
    if (that == null)
      return false;

    boolean this_present_userId = true && this.isSetUserId();
    boolean that_present_userId = true && that.isSetUserId();
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (!this.userId.equals(that.userId))
        return false;
    }

    boolean this_present_yearOfBirth = true && this.isSetYearOfBirth();
    boolean that_present_yearOfBirth = true && that.isSetYearOfBirth();
    if (this_present_yearOfBirth || that_present_yearOfBirth) {
      if (!(this_present_yearOfBirth && that_present_yearOfBirth))
        return false;
      if (!this.yearOfBirth.equals(that.yearOfBirth))
        return false;
    }

    boolean this_present_constellation = true && this.isSetConstellation();
    boolean that_present_constellation = true && that.isSetConstellation();
    if (this_present_constellation || that_present_constellation) {
      if (!(this_present_constellation && that_present_constellation))
        return false;
      if (!this.constellation.equals(that.constellation))
        return false;
    }

    boolean this_present_registerType = true && this.isSetRegisterType();
    boolean that_present_registerType = true && that.isSetRegisterType();
    if (this_present_registerType || that_present_registerType) {
      if (!(this_present_registerType && that_present_registerType))
        return false;
      if (!this.registerType.equals(that.registerType))
        return false;
    }

    boolean this_present_registerTypeString = true && this.isSetRegisterTypeString();
    boolean that_present_registerTypeString = true && that.isSetRegisterTypeString();
    if (this_present_registerTypeString || that_present_registerTypeString) {
      if (!(this_present_registerTypeString && that_present_registerTypeString))
        return false;
      if (!this.registerTypeString.equals(that.registerTypeString))
        return false;
    }

    boolean this_present_nowPlace = true && this.isSetNowPlace();
    boolean that_present_nowPlace = true && that.isSetNowPlace();
    if (this_present_nowPlace || that_present_nowPlace) {
      if (!(this_present_nowPlace && that_present_nowPlace))
        return false;
      if (!this.nowPlace.equals(that.nowPlace))
        return false;
    }

    boolean this_present_nowPlaceString = true && this.isSetNowPlaceString();
    boolean that_present_nowPlaceString = true && that.isSetNowPlaceString();
    if (this_present_nowPlaceString || that_present_nowPlaceString) {
      if (!(this_present_nowPlaceString && that_present_nowPlaceString))
        return false;
      if (!this.nowPlaceString.equals(that.nowPlaceString))
        return false;
    }

    boolean this_present_profession = true && this.isSetProfession();
    boolean that_present_profession = true && that.isSetProfession();
    if (this_present_profession || that_present_profession) {
      if (!(this_present_profession && that_present_profession))
        return false;
      if (!this.profession.equals(that.profession))
        return false;
    }

    boolean this_present_professionString = true && this.isSetProfessionString();
    boolean that_present_professionString = true && that.isSetProfessionString();
    if (this_present_professionString || that_present_professionString) {
      if (!(this_present_professionString && that_present_professionString))
        return false;
      if (!this.professionString.equals(that.professionString))
        return false;
    }

    boolean this_present_nativePlace = true && this.isSetNativePlace();
    boolean that_present_nativePlace = true && that.isSetNativePlace();
    if (this_present_nativePlace || that_present_nativePlace) {
      if (!(this_present_nativePlace && that_present_nativePlace))
        return false;
      if (!this.nativePlace.equals(that.nativePlace))
        return false;
    }

    boolean this_present_nativePlaceString = true && this.isSetNativePlaceString();
    boolean that_present_nativePlaceString = true && that.isSetNativePlaceString();
    if (this_present_nativePlaceString || that_present_nativePlaceString) {
      if (!(this_present_nativePlaceString && that_present_nativePlaceString))
        return false;
      if (!this.nativePlaceString.equals(that.nativePlaceString))
        return false;
    }

    boolean this_present_nation = true && this.isSetNation();
    boolean that_present_nation = true && that.isSetNation();
    if (this_present_nation || that_present_nation) {
      if (!(this_present_nation && that_present_nation))
        return false;
      if (!this.nation.equals(that.nation))
        return false;
    }

    boolean this_present_nationString = true && this.isSetNationString();
    boolean that_present_nationString = true && that.isSetNationString();
    if (this_present_nationString || that_present_nationString) {
      if (!(this_present_nationString && that_present_nationString))
        return false;
      if (!this.nationString.equals(that.nationString))
        return false;
    }

    boolean this_present_belife = true && this.isSetBelife();
    boolean that_present_belife = true && that.isSetBelife();
    if (this_present_belife || that_present_belife) {
      if (!(this_present_belife && that_present_belife))
        return false;
      if (!this.belife.equals(that.belife))
        return false;
    }

    boolean this_present_belifeString = true && this.isSetBelifeString();
    boolean that_present_belifeString = true && that.isSetBelifeString();
    if (this_present_belifeString || that_present_belifeString) {
      if (!(this_present_belifeString && that_present_belifeString))
        return false;
      if (!this.belifeString.equals(that.belifeString))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_identityCard = true && this.isSetIdentityCard();
    boolean that_present_identityCard = true && that.isSetIdentityCard();
    if (this_present_identityCard || that_present_identityCard) {
      if (!(this_present_identityCard && that_present_identityCard))
        return false;
      if (!this.identityCard.equals(that.identityCard))
        return false;
    }

    boolean this_present_passport = true && this.isSetPassport();
    boolean that_present_passport = true && that.isSetPassport();
    if (this_present_passport || that_present_passport) {
      if (!(this_present_passport && that_present_passport))
        return false;
      if (!this.passport.equals(that.passport))
        return false;
    }

    boolean this_present_officersCard = true && this.isSetOfficersCard();
    boolean that_present_officersCard = true && that.isSetOfficersCard();
    if (this_present_officersCard || that_present_officersCard) {
      if (!(this_present_officersCard && that_present_officersCard))
        return false;
      if (!this.officersCard.equals(that.officersCard))
        return false;
    }

    boolean this_present_certificateType = true && this.isSetCertificateType();
    boolean that_present_certificateType = true && that.isSetCertificateType();
    if (this_present_certificateType || that_present_certificateType) {
      if (!(this_present_certificateType && that_present_certificateType))
        return false;
      if (!this.certificateType.equals(that.certificateType))
        return false;
    }

    boolean this_present_certificateValue = true && this.isSetCertificateValue();
    boolean that_present_certificateValue = true && that.isSetCertificateValue();
    if (this_present_certificateValue || that_present_certificateValue) {
      if (!(this_present_certificateValue && that_present_certificateValue))
        return false;
      if (!this.certificateValue.equals(that.certificateValue))
        return false;
    }

    boolean this_present_email = true && this.isSetEmail();
    boolean that_present_email = true && that.isSetEmail();
    if (this_present_email || that_present_email) {
      if (!(this_present_email && that_present_email))
        return false;
      if (!this.email.equals(that.email))
        return false;
    }

    boolean this_present_yearOfBirthString = true && this.isSetYearOfBirthString();
    boolean that_present_yearOfBirthString = true && that.isSetYearOfBirthString();
    if (this_present_yearOfBirthString || that_present_yearOfBirthString) {
      if (!(this_present_yearOfBirthString && that_present_yearOfBirthString))
        return false;
      if (!this.yearOfBirthString.equals(that.yearOfBirthString))
        return false;
    }

    boolean this_present_constellationString = true && this.isSetConstellationString();
    boolean that_present_constellationString = true && that.isSetConstellationString();
    if (this_present_constellationString || that_present_constellationString) {
      if (!(this_present_constellationString && that_present_constellationString))
        return false;
      if (!this.constellationString.equals(that.constellationString))
        return false;
    }

    boolean this_present_memberLevel = true;
    boolean that_present_memberLevel = true;
    if (this_present_memberLevel || that_present_memberLevel) {
      if (!(this_present_memberLevel && that_present_memberLevel))
        return false;
      if (this.memberLevel != that.memberLevel)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(UserExtendInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetYearOfBirth()).compareTo(other.isSetYearOfBirth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYearOfBirth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.yearOfBirth, other.yearOfBirth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConstellation()).compareTo(other.isSetConstellation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConstellation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.constellation, other.constellation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegisterType()).compareTo(other.isSetRegisterType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegisterType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.registerType, other.registerType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegisterTypeString()).compareTo(other.isSetRegisterTypeString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegisterTypeString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.registerTypeString, other.registerTypeString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNowPlace()).compareTo(other.isSetNowPlace());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNowPlace()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nowPlace, other.nowPlace);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNowPlaceString()).compareTo(other.isSetNowPlaceString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNowPlaceString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nowPlaceString, other.nowPlaceString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProfession()).compareTo(other.isSetProfession());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProfession()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profession, other.profession);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProfessionString()).compareTo(other.isSetProfessionString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProfessionString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.professionString, other.professionString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNativePlace()).compareTo(other.isSetNativePlace());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNativePlace()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nativePlace, other.nativePlace);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNativePlaceString()).compareTo(other.isSetNativePlaceString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNativePlaceString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nativePlaceString, other.nativePlaceString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNation()).compareTo(other.isSetNation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nation, other.nation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNationString()).compareTo(other.isSetNationString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNationString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nationString, other.nationString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBelife()).compareTo(other.isSetBelife());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBelife()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.belife, other.belife);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBelifeString()).compareTo(other.isSetBelifeString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBelifeString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.belifeString, other.belifeString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdentityCard()).compareTo(other.isSetIdentityCard());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdentityCard()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identityCard, other.identityCard);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPassport()).compareTo(other.isSetPassport());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassport()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.passport, other.passport);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOfficersCard()).compareTo(other.isSetOfficersCard());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOfficersCard()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.officersCard, other.officersCard);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCertificateType()).compareTo(other.isSetCertificateType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCertificateType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.certificateType, other.certificateType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCertificateValue()).compareTo(other.isSetCertificateValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCertificateValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.certificateValue, other.certificateValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmail()).compareTo(other.isSetEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, other.email);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetYearOfBirthString()).compareTo(other.isSetYearOfBirthString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYearOfBirthString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.yearOfBirthString, other.yearOfBirthString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConstellationString()).compareTo(other.isSetConstellationString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConstellationString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.constellationString, other.constellationString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemberLevel()).compareTo(other.isSetMemberLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemberLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberLevel, other.memberLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserExtendInfo(");
    boolean first = true;

    sb.append("userId:");
    if (this.userId == null) {
      sb.append("null");
    } else {
      sb.append(this.userId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("yearOfBirth:");
    if (this.yearOfBirth == null) {
      sb.append("null");
    } else {
      sb.append(this.yearOfBirth);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("constellation:");
    if (this.constellation == null) {
      sb.append("null");
    } else {
      sb.append(this.constellation);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("registerType:");
    if (this.registerType == null) {
      sb.append("null");
    } else {
      sb.append(this.registerType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("registerTypeString:");
    if (this.registerTypeString == null) {
      sb.append("null");
    } else {
      sb.append(this.registerTypeString);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nowPlace:");
    if (this.nowPlace == null) {
      sb.append("null");
    } else {
      sb.append(this.nowPlace);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nowPlaceString:");
    if (this.nowPlaceString == null) {
      sb.append("null");
    } else {
      sb.append(this.nowPlaceString);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("profession:");
    if (this.profession == null) {
      sb.append("null");
    } else {
      sb.append(this.profession);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("professionString:");
    if (this.professionString == null) {
      sb.append("null");
    } else {
      sb.append(this.professionString);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nativePlace:");
    if (this.nativePlace == null) {
      sb.append("null");
    } else {
      sb.append(this.nativePlace);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nativePlaceString:");
    if (this.nativePlaceString == null) {
      sb.append("null");
    } else {
      sb.append(this.nativePlaceString);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nation:");
    if (this.nation == null) {
      sb.append("null");
    } else {
      sb.append(this.nation);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nationString:");
    if (this.nationString == null) {
      sb.append("null");
    } else {
      sb.append(this.nationString);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("belife:");
    if (this.belife == null) {
      sb.append("null");
    } else {
      sb.append(this.belife);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("belifeString:");
    if (this.belifeString == null) {
      sb.append("null");
    } else {
      sb.append(this.belifeString);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("description:");
    if (this.description == null) {
      sb.append("null");
    } else {
      sb.append(this.description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("identityCard:");
    if (this.identityCard == null) {
      sb.append("null");
    } else {
      sb.append(this.identityCard);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("passport:");
    if (this.passport == null) {
      sb.append("null");
    } else {
      sb.append(this.passport);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("officersCard:");
    if (this.officersCard == null) {
      sb.append("null");
    } else {
      sb.append(this.officersCard);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("certificateType:");
    if (this.certificateType == null) {
      sb.append("null");
    } else {
      sb.append(this.certificateType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("certificateValue:");
    if (this.certificateValue == null) {
      sb.append("null");
    } else {
      sb.append(this.certificateValue);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("email:");
    if (this.email == null) {
      sb.append("null");
    } else {
      sb.append(this.email);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("yearOfBirthString:");
    if (this.yearOfBirthString == null) {
      sb.append("null");
    } else {
      sb.append(this.yearOfBirthString);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("constellationString:");
    if (this.constellationString == null) {
      sb.append("null");
    } else {
      sb.append(this.constellationString);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("memberLevel:");
    sb.append(this.memberLevel);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserExtendInfoStandardSchemeFactory implements SchemeFactory {
    public UserExtendInfoStandardScheme getScheme() {
      return new UserExtendInfoStandardScheme();
    }
  }

  private static class UserExtendInfoStandardScheme extends StandardScheme<UserExtendInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserExtendInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userId = iprot.readString();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // YEAR_OF_BIRTH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.yearOfBirth = iprot.readString();
              struct.setYearOfBirthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CONSTELLATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.constellation = iprot.readString();
              struct.setConstellationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REGISTER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.registerType = RegisterTypeEnum.findByValue(iprot.readI32());
              struct.setRegisterTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REGISTER_TYPE_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.registerTypeString = iprot.readString();
              struct.setRegisterTypeStringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NOW_PLACE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nowPlace = iprot.readString();
              struct.setNowPlaceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // NOW_PLACE_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nowPlaceString = iprot.readString();
              struct.setNowPlaceStringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PROFESSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.profession = iprot.readString();
              struct.setProfessionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PROFESSION_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.professionString = iprot.readString();
              struct.setProfessionStringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // NATIVE_PLACE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nativePlace = iprot.readString();
              struct.setNativePlaceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // NATIVE_PLACE_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nativePlaceString = iprot.readString();
              struct.setNativePlaceStringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // NATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nation = iprot.readString();
              struct.setNationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // NATION_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nationString = iprot.readString();
              struct.setNationStringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // BELIFE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.belife = iprot.readString();
              struct.setBelifeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // BELIFE_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.belifeString = iprot.readString();
              struct.setBelifeStringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // IDENTITY_CARD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.identityCard = iprot.readString();
              struct.setIdentityCardIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // PASSPORT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.passport = iprot.readString();
              struct.setPassportIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // OFFICERS_CARD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.officersCard = iprot.readString();
              struct.setOfficersCardIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // CERTIFICATE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.certificateType = CertificateTypeEnum.findByValue(iprot.readI32());
              struct.setCertificateTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // CERTIFICATE_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.certificateValue = iprot.readString();
              struct.setCertificateValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.email = iprot.readString();
              struct.setEmailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // YEAR_OF_BIRTH_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.yearOfBirthString = iprot.readString();
              struct.setYearOfBirthStringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // CONSTELLATION_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.constellationString = iprot.readString();
              struct.setConstellationStringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // MEMBER_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.memberLevel = iprot.readI32();
              struct.setMemberLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserExtendInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.userId != null) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeString(struct.userId);
        oprot.writeFieldEnd();
      }
      if (struct.yearOfBirth != null) {
        oprot.writeFieldBegin(YEAR_OF_BIRTH_FIELD_DESC);
        oprot.writeString(struct.yearOfBirth);
        oprot.writeFieldEnd();
      }
      if (struct.constellation != null) {
        oprot.writeFieldBegin(CONSTELLATION_FIELD_DESC);
        oprot.writeString(struct.constellation);
        oprot.writeFieldEnd();
      }
      if (struct.registerType != null) {
        oprot.writeFieldBegin(REGISTER_TYPE_FIELD_DESC);
        oprot.writeI32(struct.registerType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.registerTypeString != null) {
        oprot.writeFieldBegin(REGISTER_TYPE_STRING_FIELD_DESC);
        oprot.writeString(struct.registerTypeString);
        oprot.writeFieldEnd();
      }
      if (struct.nowPlace != null) {
        oprot.writeFieldBegin(NOW_PLACE_FIELD_DESC);
        oprot.writeString(struct.nowPlace);
        oprot.writeFieldEnd();
      }
      if (struct.nowPlaceString != null) {
        oprot.writeFieldBegin(NOW_PLACE_STRING_FIELD_DESC);
        oprot.writeString(struct.nowPlaceString);
        oprot.writeFieldEnd();
      }
      if (struct.profession != null) {
        oprot.writeFieldBegin(PROFESSION_FIELD_DESC);
        oprot.writeString(struct.profession);
        oprot.writeFieldEnd();
      }
      if (struct.professionString != null) {
        oprot.writeFieldBegin(PROFESSION_STRING_FIELD_DESC);
        oprot.writeString(struct.professionString);
        oprot.writeFieldEnd();
      }
      if (struct.nativePlace != null) {
        oprot.writeFieldBegin(NATIVE_PLACE_FIELD_DESC);
        oprot.writeString(struct.nativePlace);
        oprot.writeFieldEnd();
      }
      if (struct.nativePlaceString != null) {
        oprot.writeFieldBegin(NATIVE_PLACE_STRING_FIELD_DESC);
        oprot.writeString(struct.nativePlaceString);
        oprot.writeFieldEnd();
      }
      if (struct.nation != null) {
        oprot.writeFieldBegin(NATION_FIELD_DESC);
        oprot.writeString(struct.nation);
        oprot.writeFieldEnd();
      }
      if (struct.nationString != null) {
        oprot.writeFieldBegin(NATION_STRING_FIELD_DESC);
        oprot.writeString(struct.nationString);
        oprot.writeFieldEnd();
      }
      if (struct.belife != null) {
        oprot.writeFieldBegin(BELIFE_FIELD_DESC);
        oprot.writeString(struct.belife);
        oprot.writeFieldEnd();
      }
      if (struct.belifeString != null) {
        oprot.writeFieldBegin(BELIFE_STRING_FIELD_DESC);
        oprot.writeString(struct.belifeString);
        oprot.writeFieldEnd();
      }
      if (struct.description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.description);
        oprot.writeFieldEnd();
      }
      if (struct.identityCard != null) {
        oprot.writeFieldBegin(IDENTITY_CARD_FIELD_DESC);
        oprot.writeString(struct.identityCard);
        oprot.writeFieldEnd();
      }
      if (struct.passport != null) {
        oprot.writeFieldBegin(PASSPORT_FIELD_DESC);
        oprot.writeString(struct.passport);
        oprot.writeFieldEnd();
      }
      if (struct.officersCard != null) {
        oprot.writeFieldBegin(OFFICERS_CARD_FIELD_DESC);
        oprot.writeString(struct.officersCard);
        oprot.writeFieldEnd();
      }
      if (struct.certificateType != null) {
        oprot.writeFieldBegin(CERTIFICATE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.certificateType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.certificateValue != null) {
        oprot.writeFieldBegin(CERTIFICATE_VALUE_FIELD_DESC);
        oprot.writeString(struct.certificateValue);
        oprot.writeFieldEnd();
      }
      if (struct.email != null) {
        oprot.writeFieldBegin(EMAIL_FIELD_DESC);
        oprot.writeString(struct.email);
        oprot.writeFieldEnd();
      }
      if (struct.yearOfBirthString != null) {
        oprot.writeFieldBegin(YEAR_OF_BIRTH_STRING_FIELD_DESC);
        oprot.writeString(struct.yearOfBirthString);
        oprot.writeFieldEnd();
      }
      if (struct.constellationString != null) {
        oprot.writeFieldBegin(CONSTELLATION_STRING_FIELD_DESC);
        oprot.writeString(struct.constellationString);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MEMBER_LEVEL_FIELD_DESC);
      oprot.writeI32(struct.memberLevel);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserExtendInfoTupleSchemeFactory implements SchemeFactory {
    public UserExtendInfoTupleScheme getScheme() {
      return new UserExtendInfoTupleScheme();
    }
  }

  private static class UserExtendInfoTupleScheme extends TupleScheme<UserExtendInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserExtendInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUserId()) {
        optionals.set(0);
      }
      if (struct.isSetYearOfBirth()) {
        optionals.set(1);
      }
      if (struct.isSetConstellation()) {
        optionals.set(2);
      }
      if (struct.isSetRegisterType()) {
        optionals.set(3);
      }
      if (struct.isSetRegisterTypeString()) {
        optionals.set(4);
      }
      if (struct.isSetNowPlace()) {
        optionals.set(5);
      }
      if (struct.isSetNowPlaceString()) {
        optionals.set(6);
      }
      if (struct.isSetProfession()) {
        optionals.set(7);
      }
      if (struct.isSetProfessionString()) {
        optionals.set(8);
      }
      if (struct.isSetNativePlace()) {
        optionals.set(9);
      }
      if (struct.isSetNativePlaceString()) {
        optionals.set(10);
      }
      if (struct.isSetNation()) {
        optionals.set(11);
      }
      if (struct.isSetNationString()) {
        optionals.set(12);
      }
      if (struct.isSetBelife()) {
        optionals.set(13);
      }
      if (struct.isSetBelifeString()) {
        optionals.set(14);
      }
      if (struct.isSetDescription()) {
        optionals.set(15);
      }
      if (struct.isSetIdentityCard()) {
        optionals.set(16);
      }
      if (struct.isSetPassport()) {
        optionals.set(17);
      }
      if (struct.isSetOfficersCard()) {
        optionals.set(18);
      }
      if (struct.isSetCertificateType()) {
        optionals.set(19);
      }
      if (struct.isSetCertificateValue()) {
        optionals.set(20);
      }
      if (struct.isSetEmail()) {
        optionals.set(21);
      }
      if (struct.isSetYearOfBirthString()) {
        optionals.set(22);
      }
      if (struct.isSetConstellationString()) {
        optionals.set(23);
      }
      if (struct.isSetMemberLevel()) {
        optionals.set(24);
      }
      oprot.writeBitSet(optionals, 25);
      if (struct.isSetUserId()) {
        oprot.writeString(struct.userId);
      }
      if (struct.isSetYearOfBirth()) {
        oprot.writeString(struct.yearOfBirth);
      }
      if (struct.isSetConstellation()) {
        oprot.writeString(struct.constellation);
      }
      if (struct.isSetRegisterType()) {
        oprot.writeI32(struct.registerType.getValue());
      }
      if (struct.isSetRegisterTypeString()) {
        oprot.writeString(struct.registerTypeString);
      }
      if (struct.isSetNowPlace()) {
        oprot.writeString(struct.nowPlace);
      }
      if (struct.isSetNowPlaceString()) {
        oprot.writeString(struct.nowPlaceString);
      }
      if (struct.isSetProfession()) {
        oprot.writeString(struct.profession);
      }
      if (struct.isSetProfessionString()) {
        oprot.writeString(struct.professionString);
      }
      if (struct.isSetNativePlace()) {
        oprot.writeString(struct.nativePlace);
      }
      if (struct.isSetNativePlaceString()) {
        oprot.writeString(struct.nativePlaceString);
      }
      if (struct.isSetNation()) {
        oprot.writeString(struct.nation);
      }
      if (struct.isSetNationString()) {
        oprot.writeString(struct.nationString);
      }
      if (struct.isSetBelife()) {
        oprot.writeString(struct.belife);
      }
      if (struct.isSetBelifeString()) {
        oprot.writeString(struct.belifeString);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetIdentityCard()) {
        oprot.writeString(struct.identityCard);
      }
      if (struct.isSetPassport()) {
        oprot.writeString(struct.passport);
      }
      if (struct.isSetOfficersCard()) {
        oprot.writeString(struct.officersCard);
      }
      if (struct.isSetCertificateType()) {
        oprot.writeI32(struct.certificateType.getValue());
      }
      if (struct.isSetCertificateValue()) {
        oprot.writeString(struct.certificateValue);
      }
      if (struct.isSetEmail()) {
        oprot.writeString(struct.email);
      }
      if (struct.isSetYearOfBirthString()) {
        oprot.writeString(struct.yearOfBirthString);
      }
      if (struct.isSetConstellationString()) {
        oprot.writeString(struct.constellationString);
      }
      if (struct.isSetMemberLevel()) {
        oprot.writeI32(struct.memberLevel);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserExtendInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(25);
      if (incoming.get(0)) {
        struct.userId = iprot.readString();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.yearOfBirth = iprot.readString();
        struct.setYearOfBirthIsSet(true);
      }
      if (incoming.get(2)) {
        struct.constellation = iprot.readString();
        struct.setConstellationIsSet(true);
      }
      if (incoming.get(3)) {
        struct.registerType = RegisterTypeEnum.findByValue(iprot.readI32());
        struct.setRegisterTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.registerTypeString = iprot.readString();
        struct.setRegisterTypeStringIsSet(true);
      }
      if (incoming.get(5)) {
        struct.nowPlace = iprot.readString();
        struct.setNowPlaceIsSet(true);
      }
      if (incoming.get(6)) {
        struct.nowPlaceString = iprot.readString();
        struct.setNowPlaceStringIsSet(true);
      }
      if (incoming.get(7)) {
        struct.profession = iprot.readString();
        struct.setProfessionIsSet(true);
      }
      if (incoming.get(8)) {
        struct.professionString = iprot.readString();
        struct.setProfessionStringIsSet(true);
      }
      if (incoming.get(9)) {
        struct.nativePlace = iprot.readString();
        struct.setNativePlaceIsSet(true);
      }
      if (incoming.get(10)) {
        struct.nativePlaceString = iprot.readString();
        struct.setNativePlaceStringIsSet(true);
      }
      if (incoming.get(11)) {
        struct.nation = iprot.readString();
        struct.setNationIsSet(true);
      }
      if (incoming.get(12)) {
        struct.nationString = iprot.readString();
        struct.setNationStringIsSet(true);
      }
      if (incoming.get(13)) {
        struct.belife = iprot.readString();
        struct.setBelifeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.belifeString = iprot.readString();
        struct.setBelifeStringIsSet(true);
      }
      if (incoming.get(15)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(16)) {
        struct.identityCard = iprot.readString();
        struct.setIdentityCardIsSet(true);
      }
      if (incoming.get(17)) {
        struct.passport = iprot.readString();
        struct.setPassportIsSet(true);
      }
      if (incoming.get(18)) {
        struct.officersCard = iprot.readString();
        struct.setOfficersCardIsSet(true);
      }
      if (incoming.get(19)) {
        struct.certificateType = CertificateTypeEnum.findByValue(iprot.readI32());
        struct.setCertificateTypeIsSet(true);
      }
      if (incoming.get(20)) {
        struct.certificateValue = iprot.readString();
        struct.setCertificateValueIsSet(true);
      }
      if (incoming.get(21)) {
        struct.email = iprot.readString();
        struct.setEmailIsSet(true);
      }
      if (incoming.get(22)) {
        struct.yearOfBirthString = iprot.readString();
        struct.setYearOfBirthStringIsSet(true);
      }
      if (incoming.get(23)) {
        struct.constellationString = iprot.readString();
        struct.setConstellationStringIsSet(true);
      }
      if (incoming.get(24)) {
        struct.memberLevel = iprot.readI32();
        struct.setMemberLevelIsSet(true);
      }
    }
  }

}

