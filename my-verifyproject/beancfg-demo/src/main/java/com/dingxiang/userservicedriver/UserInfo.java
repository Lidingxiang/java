/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.dingxiang.userservicedriver;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class UserInfo implements org.apache.thrift.TBase<UserInfo, UserInfo._Fields>, java.io.Serializable, Cloneable, Comparable<UserInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserInfo");

  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NICK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("nickName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TRUE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("trueName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SEX_FIELD_DESC = new org.apache.thrift.protocol.TField("sex", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField SEX_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("sexString", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField BIRTHDAY_FIELD_DESC = new org.apache.thrift.protocol.TField("birthday", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("phone", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField USER_IMAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("userImage", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ACCOUNT_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("accountState", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField ACCOUNT_STATE_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("accountStateString", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField INSTANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("instance", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField OPEN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("OpenId", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField LAST_UPDATE_LOCATION_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("lastUpdateLocationDt", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField AGENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("agentType", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField AUTHED_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("authedType", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField AUTHED_PERCENT_FIELD_DESC = new org.apache.thrift.protocol.TField("authedPercent", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField AGE_FIELD_DESC = new org.apache.thrift.protocol.TField("age", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField PROFESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("profession", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField PROFESSION_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("professionString", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField NATIVE_PLACE_FIELD_DESC = new org.apache.thrift.protocol.TField("nativePlace", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField NATIVE_PLACE_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("nativePlaceString", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField CREATE_DATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createDateTime", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField LOGIN_ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("loginAccount", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField MEMBER_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("memberLevel", org.apache.thrift.protocol.TType.I32, (short)25);
  private static final org.apache.thrift.protocol.TField IS_CANCEL_FIELD_DESC = new org.apache.thrift.protocol.TField("isCancel", org.apache.thrift.protocol.TType.BOOL, (short)26);
  private static final org.apache.thrift.protocol.TField MARKET_ONE_FIELD_DESC = new org.apache.thrift.protocol.TField("marketOne", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField IDENTITY_CARD_FIELD_DESC = new org.apache.thrift.protocol.TField("identityCard", org.apache.thrift.protocol.TType.STRING, (short)28);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserInfoTupleSchemeFactory());
  }

  public String userId; // required
  public String nickName; // required
  public String trueName; // required
  /**
   * 
   * @see SexTypeEnum
   */
  public SexTypeEnum sex; // required
  public String sexString; // required
  public String birthday; // required
  public String phone; // required
  public String userImage; // required
  /**
   * 
   * @see AccountStateEnum
   */
  public AccountStateEnum accountState; // required
  public String accountStateString; // required
  public String remark; // required
  public double instance; // required
  public String OpenId; // required
  public String lastUpdateLocationDt; // required
  /**
   * 
   * @see AgentType
   */
  public AgentType agentType; // required
  /**
   * 
   * @see AuthedType
   */
  public AuthedType authedType; // required
  public String authedPercent; // required
  public int age; // required
  public String profession; // required
  public String professionString; // required
  public String nativePlace; // required
  public String nativePlaceString; // required
  public String createDateTime; // required
  public String loginAccount; // required
  public int memberLevel; // required
  public boolean isCancel; // required
  public String marketOne; // required
  public String identityCard; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_ID((short)1, "userId"),
    NICK_NAME((short)2, "nickName"),
    TRUE_NAME((short)3, "trueName"),
    /**
     * 
     * @see SexTypeEnum
     */
    SEX((short)4, "sex"),
    SEX_STRING((short)5, "sexString"),
    BIRTHDAY((short)6, "birthday"),
    PHONE((short)7, "phone"),
    USER_IMAGE((short)8, "userImage"),
    /**
     * 
     * @see AccountStateEnum
     */
    ACCOUNT_STATE((short)9, "accountState"),
    ACCOUNT_STATE_STRING((short)10, "accountStateString"),
    REMARK((short)11, "remark"),
    INSTANCE((short)12, "instance"),
    OPEN_ID((short)13, "OpenId"),
    LAST_UPDATE_LOCATION_DT((short)14, "lastUpdateLocationDt"),
    /**
     * 
     * @see AgentType
     */
    AGENT_TYPE((short)15, "agentType"),
    /**
     * 
     * @see AuthedType
     */
    AUTHED_TYPE((short)16, "authedType"),
    AUTHED_PERCENT((short)17, "authedPercent"),
    AGE((short)18, "age"),
    PROFESSION((short)19, "profession"),
    PROFESSION_STRING((short)20, "professionString"),
    NATIVE_PLACE((short)21, "nativePlace"),
    NATIVE_PLACE_STRING((short)22, "nativePlaceString"),
    CREATE_DATE_TIME((short)23, "createDateTime"),
    LOGIN_ACCOUNT((short)24, "loginAccount"),
    MEMBER_LEVEL((short)25, "memberLevel"),
    IS_CANCEL((short)26, "isCancel"),
    MARKET_ONE((short)27, "marketOne"),
    IDENTITY_CARD((short)28, "identityCard");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_ID
          return USER_ID;
        case 2: // NICK_NAME
          return NICK_NAME;
        case 3: // TRUE_NAME
          return TRUE_NAME;
        case 4: // SEX
          return SEX;
        case 5: // SEX_STRING
          return SEX_STRING;
        case 6: // BIRTHDAY
          return BIRTHDAY;
        case 7: // PHONE
          return PHONE;
        case 8: // USER_IMAGE
          return USER_IMAGE;
        case 9: // ACCOUNT_STATE
          return ACCOUNT_STATE;
        case 10: // ACCOUNT_STATE_STRING
          return ACCOUNT_STATE_STRING;
        case 11: // REMARK
          return REMARK;
        case 12: // INSTANCE
          return INSTANCE;
        case 13: // OPEN_ID
          return OPEN_ID;
        case 14: // LAST_UPDATE_LOCATION_DT
          return LAST_UPDATE_LOCATION_DT;
        case 15: // AGENT_TYPE
          return AGENT_TYPE;
        case 16: // AUTHED_TYPE
          return AUTHED_TYPE;
        case 17: // AUTHED_PERCENT
          return AUTHED_PERCENT;
        case 18: // AGE
          return AGE;
        case 19: // PROFESSION
          return PROFESSION;
        case 20: // PROFESSION_STRING
          return PROFESSION_STRING;
        case 21: // NATIVE_PLACE
          return NATIVE_PLACE;
        case 22: // NATIVE_PLACE_STRING
          return NATIVE_PLACE_STRING;
        case 23: // CREATE_DATE_TIME
          return CREATE_DATE_TIME;
        case 24: // LOGIN_ACCOUNT
          return LOGIN_ACCOUNT;
        case 25: // MEMBER_LEVEL
          return MEMBER_LEVEL;
        case 26: // IS_CANCEL
          return IS_CANCEL;
        case 27: // MARKET_ONE
          return MARKET_ONE;
        case 28: // IDENTITY_CARD
          return IDENTITY_CARD;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INSTANCE_ISSET_ID = 0;
  private static final int __AGE_ISSET_ID = 1;
  private static final int __MEMBERLEVEL_ISSET_ID = 2;
  private static final int __ISCANCEL_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NICK_NAME, new org.apache.thrift.meta_data.FieldMetaData("nickName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRUE_NAME, new org.apache.thrift.meta_data.FieldMetaData("trueName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEX, new org.apache.thrift.meta_data.FieldMetaData("sex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SexTypeEnum.class)));
    tmpMap.put(_Fields.SEX_STRING, new org.apache.thrift.meta_data.FieldMetaData("sexString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BIRTHDAY, new org.apache.thrift.meta_data.FieldMetaData("birthday", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHONE, new org.apache.thrift.meta_data.FieldMetaData("phone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_IMAGE, new org.apache.thrift.meta_data.FieldMetaData("userImage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCOUNT_STATE, new org.apache.thrift.meta_data.FieldMetaData("accountState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, AccountStateEnum.class)));
    tmpMap.put(_Fields.ACCOUNT_STATE_STRING, new org.apache.thrift.meta_data.FieldMetaData("accountStateString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INSTANCE, new org.apache.thrift.meta_data.FieldMetaData("instance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OPEN_ID, new org.apache.thrift.meta_data.FieldMetaData("OpenId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_UPDATE_LOCATION_DT, new org.apache.thrift.meta_data.FieldMetaData("lastUpdateLocationDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AGENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("agentType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, AgentType.class)));
    tmpMap.put(_Fields.AUTHED_TYPE, new org.apache.thrift.meta_data.FieldMetaData("authedType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, AuthedType.class)));
    tmpMap.put(_Fields.AUTHED_PERCENT, new org.apache.thrift.meta_data.FieldMetaData("authedPercent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AGE, new org.apache.thrift.meta_data.FieldMetaData("age", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROFESSION, new org.apache.thrift.meta_data.FieldMetaData("profession", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROFESSION_STRING, new org.apache.thrift.meta_data.FieldMetaData("professionString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NATIVE_PLACE, new org.apache.thrift.meta_data.FieldMetaData("nativePlace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NATIVE_PLACE_STRING, new org.apache.thrift.meta_data.FieldMetaData("nativePlaceString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_DATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createDateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOGIN_ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("loginAccount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEMBER_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("memberLevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_CANCEL, new org.apache.thrift.meta_data.FieldMetaData("isCancel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.MARKET_ONE, new org.apache.thrift.meta_data.FieldMetaData("marketOne", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IDENTITY_CARD, new org.apache.thrift.meta_data.FieldMetaData("identityCard", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserInfo.class, metaDataMap);
  }

  public UserInfo() {
  }

  public UserInfo(
    String userId,
    String nickName,
    String trueName,
    SexTypeEnum sex,
    String sexString,
    String birthday,
    String phone,
    String userImage,
    AccountStateEnum accountState,
    String accountStateString,
    String remark,
    double instance,
    String OpenId,
    String lastUpdateLocationDt,
    AgentType agentType,
    AuthedType authedType,
    String authedPercent,
    int age,
    String profession,
    String professionString,
    String nativePlace,
    String nativePlaceString,
    String createDateTime,
    String loginAccount,
    int memberLevel,
    boolean isCancel,
    String marketOne,
    String identityCard)
  {
    this();
    this.userId = userId;
    this.nickName = nickName;
    this.trueName = trueName;
    this.sex = sex;
    this.sexString = sexString;
    this.birthday = birthday;
    this.phone = phone;
    this.userImage = userImage;
    this.accountState = accountState;
    this.accountStateString = accountStateString;
    this.remark = remark;
    this.instance = instance;
    setInstanceIsSet(true);
    this.OpenId = OpenId;
    this.lastUpdateLocationDt = lastUpdateLocationDt;
    this.agentType = agentType;
    this.authedType = authedType;
    this.authedPercent = authedPercent;
    this.age = age;
    setAgeIsSet(true);
    this.profession = profession;
    this.professionString = professionString;
    this.nativePlace = nativePlace;
    this.nativePlaceString = nativePlaceString;
    this.createDateTime = createDateTime;
    this.loginAccount = loginAccount;
    this.memberLevel = memberLevel;
    setMemberLevelIsSet(true);
    this.isCancel = isCancel;
    setIsCancelIsSet(true);
    this.marketOne = marketOne;
    this.identityCard = identityCard;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserInfo(UserInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetUserId()) {
      this.userId = other.userId;
    }
    if (other.isSetNickName()) {
      this.nickName = other.nickName;
    }
    if (other.isSetTrueName()) {
      this.trueName = other.trueName;
    }
    if (other.isSetSex()) {
      this.sex = other.sex;
    }
    if (other.isSetSexString()) {
      this.sexString = other.sexString;
    }
    if (other.isSetBirthday()) {
      this.birthday = other.birthday;
    }
    if (other.isSetPhone()) {
      this.phone = other.phone;
    }
    if (other.isSetUserImage()) {
      this.userImage = other.userImage;
    }
    if (other.isSetAccountState()) {
      this.accountState = other.accountState;
    }
    if (other.isSetAccountStateString()) {
      this.accountStateString = other.accountStateString;
    }
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    this.instance = other.instance;
    if (other.isSetOpenId()) {
      this.OpenId = other.OpenId;
    }
    if (other.isSetLastUpdateLocationDt()) {
      this.lastUpdateLocationDt = other.lastUpdateLocationDt;
    }
    if (other.isSetAgentType()) {
      this.agentType = other.agentType;
    }
    if (other.isSetAuthedType()) {
      this.authedType = other.authedType;
    }
    if (other.isSetAuthedPercent()) {
      this.authedPercent = other.authedPercent;
    }
    this.age = other.age;
    if (other.isSetProfession()) {
      this.profession = other.profession;
    }
    if (other.isSetProfessionString()) {
      this.professionString = other.professionString;
    }
    if (other.isSetNativePlace()) {
      this.nativePlace = other.nativePlace;
    }
    if (other.isSetNativePlaceString()) {
      this.nativePlaceString = other.nativePlaceString;
    }
    if (other.isSetCreateDateTime()) {
      this.createDateTime = other.createDateTime;
    }
    if (other.isSetLoginAccount()) {
      this.loginAccount = other.loginAccount;
    }
    this.memberLevel = other.memberLevel;
    this.isCancel = other.isCancel;
    if (other.isSetMarketOne()) {
      this.marketOne = other.marketOne;
    }
    if (other.isSetIdentityCard()) {
      this.identityCard = other.identityCard;
    }
  }

  public UserInfo deepCopy() {
    return new UserInfo(this);
  }

  @Override
  public void clear() {
    this.userId = null;
    this.nickName = null;
    this.trueName = null;
    this.sex = null;
    this.sexString = null;
    this.birthday = null;
    this.phone = null;
    this.userImage = null;
    this.accountState = null;
    this.accountStateString = null;
    this.remark = null;
    setInstanceIsSet(false);
    this.instance = 0.0;
    this.OpenId = null;
    this.lastUpdateLocationDt = null;
    this.agentType = null;
    this.authedType = null;
    this.authedPercent = null;
    setAgeIsSet(false);
    this.age = 0;
    this.profession = null;
    this.professionString = null;
    this.nativePlace = null;
    this.nativePlaceString = null;
    this.createDateTime = null;
    this.loginAccount = null;
    setMemberLevelIsSet(false);
    this.memberLevel = 0;
    setIsCancelIsSet(false);
    this.isCancel = false;
    this.marketOne = null;
    this.identityCard = null;
  }

  public String getUserId() {
    return this.userId;
  }

  public UserInfo setUserId(String userId) {
    this.userId = userId;
    return this;
  }

  public void unsetUserId() {
    this.userId = null;
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return this.userId != null;
  }

  public void setUserIdIsSet(boolean value) {
    if (!value) {
      this.userId = null;
    }
  }

  public String getNickName() {
    return this.nickName;
  }

  public UserInfo setNickName(String nickName) {
    this.nickName = nickName;
    return this;
  }

  public void unsetNickName() {
    this.nickName = null;
  }

  /** Returns true if field nickName is set (has been assigned a value) and false otherwise */
  public boolean isSetNickName() {
    return this.nickName != null;
  }

  public void setNickNameIsSet(boolean value) {
    if (!value) {
      this.nickName = null;
    }
  }

  public String getTrueName() {
    return this.trueName;
  }

  public UserInfo setTrueName(String trueName) {
    this.trueName = trueName;
    return this;
  }

  public void unsetTrueName() {
    this.trueName = null;
  }

  /** Returns true if field trueName is set (has been assigned a value) and false otherwise */
  public boolean isSetTrueName() {
    return this.trueName != null;
  }

  public void setTrueNameIsSet(boolean value) {
    if (!value) {
      this.trueName = null;
    }
  }

  /**
   * 
   * @see SexTypeEnum
   */
  public SexTypeEnum getSex() {
    return this.sex;
  }

  /**
   * 
   * @see SexTypeEnum
   */
  public UserInfo setSex(SexTypeEnum sex) {
    this.sex = sex;
    return this;
  }

  public void unsetSex() {
    this.sex = null;
  }

  /** Returns true if field sex is set (has been assigned a value) and false otherwise */
  public boolean isSetSex() {
    return this.sex != null;
  }

  public void setSexIsSet(boolean value) {
    if (!value) {
      this.sex = null;
    }
  }

  public String getSexString() {
    return this.sexString;
  }

  public UserInfo setSexString(String sexString) {
    this.sexString = sexString;
    return this;
  }

  public void unsetSexString() {
    this.sexString = null;
  }

  /** Returns true if field sexString is set (has been assigned a value) and false otherwise */
  public boolean isSetSexString() {
    return this.sexString != null;
  }

  public void setSexStringIsSet(boolean value) {
    if (!value) {
      this.sexString = null;
    }
  }

  public String getBirthday() {
    return this.birthday;
  }

  public UserInfo setBirthday(String birthday) {
    this.birthday = birthday;
    return this;
  }

  public void unsetBirthday() {
    this.birthday = null;
  }

  /** Returns true if field birthday is set (has been assigned a value) and false otherwise */
  public boolean isSetBirthday() {
    return this.birthday != null;
  }

  public void setBirthdayIsSet(boolean value) {
    if (!value) {
      this.birthday = null;
    }
  }

  public String getPhone() {
    return this.phone;
  }

  public UserInfo setPhone(String phone) {
    this.phone = phone;
    return this;
  }

  public void unsetPhone() {
    this.phone = null;
  }

  /** Returns true if field phone is set (has been assigned a value) and false otherwise */
  public boolean isSetPhone() {
    return this.phone != null;
  }

  public void setPhoneIsSet(boolean value) {
    if (!value) {
      this.phone = null;
    }
  }

  public String getUserImage() {
    return this.userImage;
  }

  public UserInfo setUserImage(String userImage) {
    this.userImage = userImage;
    return this;
  }

  public void unsetUserImage() {
    this.userImage = null;
  }

  /** Returns true if field userImage is set (has been assigned a value) and false otherwise */
  public boolean isSetUserImage() {
    return this.userImage != null;
  }

  public void setUserImageIsSet(boolean value) {
    if (!value) {
      this.userImage = null;
    }
  }

  /**
   * 
   * @see AccountStateEnum
   */
  public AccountStateEnum getAccountState() {
    return this.accountState;
  }

  /**
   * 
   * @see AccountStateEnum
   */
  public UserInfo setAccountState(AccountStateEnum accountState) {
    this.accountState = accountState;
    return this;
  }

  public void unsetAccountState() {
    this.accountState = null;
  }

  /** Returns true if field accountState is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountState() {
    return this.accountState != null;
  }

  public void setAccountStateIsSet(boolean value) {
    if (!value) {
      this.accountState = null;
    }
  }

  public String getAccountStateString() {
    return this.accountStateString;
  }

  public UserInfo setAccountStateString(String accountStateString) {
    this.accountStateString = accountStateString;
    return this;
  }

  public void unsetAccountStateString() {
    this.accountStateString = null;
  }

  /** Returns true if field accountStateString is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountStateString() {
    return this.accountStateString != null;
  }

  public void setAccountStateStringIsSet(boolean value) {
    if (!value) {
      this.accountStateString = null;
    }
  }

  public String getRemark() {
    return this.remark;
  }

  public UserInfo setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public double getInstance() {
    return this.instance;
  }

  public UserInfo setInstance(double instance) {
    this.instance = instance;
    setInstanceIsSet(true);
    return this;
  }

  public void unsetInstance() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INSTANCE_ISSET_ID);
  }

  /** Returns true if field instance is set (has been assigned a value) and false otherwise */
  public boolean isSetInstance() {
    return EncodingUtils.testBit(__isset_bitfield, __INSTANCE_ISSET_ID);
  }

  public void setInstanceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INSTANCE_ISSET_ID, value);
  }

  public String getOpenId() {
    return this.OpenId;
  }

  public UserInfo setOpenId(String OpenId) {
    this.OpenId = OpenId;
    return this;
  }

  public void unsetOpenId() {
    this.OpenId = null;
  }

  /** Returns true if field OpenId is set (has been assigned a value) and false otherwise */
  public boolean isSetOpenId() {
    return this.OpenId != null;
  }

  public void setOpenIdIsSet(boolean value) {
    if (!value) {
      this.OpenId = null;
    }
  }

  public String getLastUpdateLocationDt() {
    return this.lastUpdateLocationDt;
  }

  public UserInfo setLastUpdateLocationDt(String lastUpdateLocationDt) {
    this.lastUpdateLocationDt = lastUpdateLocationDt;
    return this;
  }

  public void unsetLastUpdateLocationDt() {
    this.lastUpdateLocationDt = null;
  }

  /** Returns true if field lastUpdateLocationDt is set (has been assigned a value) and false otherwise */
  public boolean isSetLastUpdateLocationDt() {
    return this.lastUpdateLocationDt != null;
  }

  public void setLastUpdateLocationDtIsSet(boolean value) {
    if (!value) {
      this.lastUpdateLocationDt = null;
    }
  }

  /**
   * 
   * @see AgentType
   */
  public AgentType getAgentType() {
    return this.agentType;
  }

  /**
   * 
   * @see AgentType
   */
  public UserInfo setAgentType(AgentType agentType) {
    this.agentType = agentType;
    return this;
  }

  public void unsetAgentType() {
    this.agentType = null;
  }

  /** Returns true if field agentType is set (has been assigned a value) and false otherwise */
  public boolean isSetAgentType() {
    return this.agentType != null;
  }

  public void setAgentTypeIsSet(boolean value) {
    if (!value) {
      this.agentType = null;
    }
  }

  /**
   * 
   * @see AuthedType
   */
  public AuthedType getAuthedType() {
    return this.authedType;
  }

  /**
   * 
   * @see AuthedType
   */
  public UserInfo setAuthedType(AuthedType authedType) {
    this.authedType = authedType;
    return this;
  }

  public void unsetAuthedType() {
    this.authedType = null;
  }

  /** Returns true if field authedType is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthedType() {
    return this.authedType != null;
  }

  public void setAuthedTypeIsSet(boolean value) {
    if (!value) {
      this.authedType = null;
    }
  }

  public String getAuthedPercent() {
    return this.authedPercent;
  }

  public UserInfo setAuthedPercent(String authedPercent) {
    this.authedPercent = authedPercent;
    return this;
  }

  public void unsetAuthedPercent() {
    this.authedPercent = null;
  }

  /** Returns true if field authedPercent is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthedPercent() {
    return this.authedPercent != null;
  }

  public void setAuthedPercentIsSet(boolean value) {
    if (!value) {
      this.authedPercent = null;
    }
  }

  public int getAge() {
    return this.age;
  }

  public UserInfo setAge(int age) {
    this.age = age;
    setAgeIsSet(true);
    return this;
  }

  public void unsetAge() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AGE_ISSET_ID);
  }

  /** Returns true if field age is set (has been assigned a value) and false otherwise */
  public boolean isSetAge() {
    return EncodingUtils.testBit(__isset_bitfield, __AGE_ISSET_ID);
  }

  public void setAgeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AGE_ISSET_ID, value);
  }

  public String getProfession() {
    return this.profession;
  }

  public UserInfo setProfession(String profession) {
    this.profession = profession;
    return this;
  }

  public void unsetProfession() {
    this.profession = null;
  }

  /** Returns true if field profession is set (has been assigned a value) and false otherwise */
  public boolean isSetProfession() {
    return this.profession != null;
  }

  public void setProfessionIsSet(boolean value) {
    if (!value) {
      this.profession = null;
    }
  }

  public String getProfessionString() {
    return this.professionString;
  }

  public UserInfo setProfessionString(String professionString) {
    this.professionString = professionString;
    return this;
  }

  public void unsetProfessionString() {
    this.professionString = null;
  }

  /** Returns true if field professionString is set (has been assigned a value) and false otherwise */
  public boolean isSetProfessionString() {
    return this.professionString != null;
  }

  public void setProfessionStringIsSet(boolean value) {
    if (!value) {
      this.professionString = null;
    }
  }

  public String getNativePlace() {
    return this.nativePlace;
  }

  public UserInfo setNativePlace(String nativePlace) {
    this.nativePlace = nativePlace;
    return this;
  }

  public void unsetNativePlace() {
    this.nativePlace = null;
  }

  /** Returns true if field nativePlace is set (has been assigned a value) and false otherwise */
  public boolean isSetNativePlace() {
    return this.nativePlace != null;
  }

  public void setNativePlaceIsSet(boolean value) {
    if (!value) {
      this.nativePlace = null;
    }
  }

  public String getNativePlaceString() {
    return this.nativePlaceString;
  }

  public UserInfo setNativePlaceString(String nativePlaceString) {
    this.nativePlaceString = nativePlaceString;
    return this;
  }

  public void unsetNativePlaceString() {
    this.nativePlaceString = null;
  }

  /** Returns true if field nativePlaceString is set (has been assigned a value) and false otherwise */
  public boolean isSetNativePlaceString() {
    return this.nativePlaceString != null;
  }

  public void setNativePlaceStringIsSet(boolean value) {
    if (!value) {
      this.nativePlaceString = null;
    }
  }

  public String getCreateDateTime() {
    return this.createDateTime;
  }

  public UserInfo setCreateDateTime(String createDateTime) {
    this.createDateTime = createDateTime;
    return this;
  }

  public void unsetCreateDateTime() {
    this.createDateTime = null;
  }

  /** Returns true if field createDateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateDateTime() {
    return this.createDateTime != null;
  }

  public void setCreateDateTimeIsSet(boolean value) {
    if (!value) {
      this.createDateTime = null;
    }
  }

  public String getLoginAccount() {
    return this.loginAccount;
  }

  public UserInfo setLoginAccount(String loginAccount) {
    this.loginAccount = loginAccount;
    return this;
  }

  public void unsetLoginAccount() {
    this.loginAccount = null;
  }

  /** Returns true if field loginAccount is set (has been assigned a value) and false otherwise */
  public boolean isSetLoginAccount() {
    return this.loginAccount != null;
  }

  public void setLoginAccountIsSet(boolean value) {
    if (!value) {
      this.loginAccount = null;
    }
  }

  public int getMemberLevel() {
    return this.memberLevel;
  }

  public UserInfo setMemberLevel(int memberLevel) {
    this.memberLevel = memberLevel;
    setMemberLevelIsSet(true);
    return this;
  }

  public void unsetMemberLevel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMBERLEVEL_ISSET_ID);
  }

  /** Returns true if field memberLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetMemberLevel() {
    return EncodingUtils.testBit(__isset_bitfield, __MEMBERLEVEL_ISSET_ID);
  }

  public void setMemberLevelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMBERLEVEL_ISSET_ID, value);
  }

  public boolean isIsCancel() {
    return this.isCancel;
  }

  public UserInfo setIsCancel(boolean isCancel) {
    this.isCancel = isCancel;
    setIsCancelIsSet(true);
    return this;
  }

  public void unsetIsCancel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISCANCEL_ISSET_ID);
  }

  /** Returns true if field isCancel is set (has been assigned a value) and false otherwise */
  public boolean isSetIsCancel() {
    return EncodingUtils.testBit(__isset_bitfield, __ISCANCEL_ISSET_ID);
  }

  public void setIsCancelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISCANCEL_ISSET_ID, value);
  }

  public String getMarketOne() {
    return this.marketOne;
  }

  public UserInfo setMarketOne(String marketOne) {
    this.marketOne = marketOne;
    return this;
  }

  public void unsetMarketOne() {
    this.marketOne = null;
  }

  /** Returns true if field marketOne is set (has been assigned a value) and false otherwise */
  public boolean isSetMarketOne() {
    return this.marketOne != null;
  }

  public void setMarketOneIsSet(boolean value) {
    if (!value) {
      this.marketOne = null;
    }
  }

  public String getIdentityCard() {
    return this.identityCard;
  }

  public UserInfo setIdentityCard(String identityCard) {
    this.identityCard = identityCard;
    return this;
  }

  public void unsetIdentityCard() {
    this.identityCard = null;
  }

  /** Returns true if field identityCard is set (has been assigned a value) and false otherwise */
  public boolean isSetIdentityCard() {
    return this.identityCard != null;
  }

  public void setIdentityCardIsSet(boolean value) {
    if (!value) {
      this.identityCard = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((String)value);
      }
      break;

    case NICK_NAME:
      if (value == null) {
        unsetNickName();
      } else {
        setNickName((String)value);
      }
      break;

    case TRUE_NAME:
      if (value == null) {
        unsetTrueName();
      } else {
        setTrueName((String)value);
      }
      break;

    case SEX:
      if (value == null) {
        unsetSex();
      } else {
        setSex((SexTypeEnum)value);
      }
      break;

    case SEX_STRING:
      if (value == null) {
        unsetSexString();
      } else {
        setSexString((String)value);
      }
      break;

    case BIRTHDAY:
      if (value == null) {
        unsetBirthday();
      } else {
        setBirthday((String)value);
      }
      break;

    case PHONE:
      if (value == null) {
        unsetPhone();
      } else {
        setPhone((String)value);
      }
      break;

    case USER_IMAGE:
      if (value == null) {
        unsetUserImage();
      } else {
        setUserImage((String)value);
      }
      break;

    case ACCOUNT_STATE:
      if (value == null) {
        unsetAccountState();
      } else {
        setAccountState((AccountStateEnum)value);
      }
      break;

    case ACCOUNT_STATE_STRING:
      if (value == null) {
        unsetAccountStateString();
      } else {
        setAccountStateString((String)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case INSTANCE:
      if (value == null) {
        unsetInstance();
      } else {
        setInstance((Double)value);
      }
      break;

    case OPEN_ID:
      if (value == null) {
        unsetOpenId();
      } else {
        setOpenId((String)value);
      }
      break;

    case LAST_UPDATE_LOCATION_DT:
      if (value == null) {
        unsetLastUpdateLocationDt();
      } else {
        setLastUpdateLocationDt((String)value);
      }
      break;

    case AGENT_TYPE:
      if (value == null) {
        unsetAgentType();
      } else {
        setAgentType((AgentType)value);
      }
      break;

    case AUTHED_TYPE:
      if (value == null) {
        unsetAuthedType();
      } else {
        setAuthedType((AuthedType)value);
      }
      break;

    case AUTHED_PERCENT:
      if (value == null) {
        unsetAuthedPercent();
      } else {
        setAuthedPercent((String)value);
      }
      break;

    case AGE:
      if (value == null) {
        unsetAge();
      } else {
        setAge((Integer)value);
      }
      break;

    case PROFESSION:
      if (value == null) {
        unsetProfession();
      } else {
        setProfession((String)value);
      }
      break;

    case PROFESSION_STRING:
      if (value == null) {
        unsetProfessionString();
      } else {
        setProfessionString((String)value);
      }
      break;

    case NATIVE_PLACE:
      if (value == null) {
        unsetNativePlace();
      } else {
        setNativePlace((String)value);
      }
      break;

    case NATIVE_PLACE_STRING:
      if (value == null) {
        unsetNativePlaceString();
      } else {
        setNativePlaceString((String)value);
      }
      break;

    case CREATE_DATE_TIME:
      if (value == null) {
        unsetCreateDateTime();
      } else {
        setCreateDateTime((String)value);
      }
      break;

    case LOGIN_ACCOUNT:
      if (value == null) {
        unsetLoginAccount();
      } else {
        setLoginAccount((String)value);
      }
      break;

    case MEMBER_LEVEL:
      if (value == null) {
        unsetMemberLevel();
      } else {
        setMemberLevel((Integer)value);
      }
      break;

    case IS_CANCEL:
      if (value == null) {
        unsetIsCancel();
      } else {
        setIsCancel((Boolean)value);
      }
      break;

    case MARKET_ONE:
      if (value == null) {
        unsetMarketOne();
      } else {
        setMarketOne((String)value);
      }
      break;

    case IDENTITY_CARD:
      if (value == null) {
        unsetIdentityCard();
      } else {
        setIdentityCard((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_ID:
      return getUserId();

    case NICK_NAME:
      return getNickName();

    case TRUE_NAME:
      return getTrueName();

    case SEX:
      return getSex();

    case SEX_STRING:
      return getSexString();

    case BIRTHDAY:
      return getBirthday();

    case PHONE:
      return getPhone();

    case USER_IMAGE:
      return getUserImage();

    case ACCOUNT_STATE:
      return getAccountState();

    case ACCOUNT_STATE_STRING:
      return getAccountStateString();

    case REMARK:
      return getRemark();

    case INSTANCE:
      return Double.valueOf(getInstance());

    case OPEN_ID:
      return getOpenId();

    case LAST_UPDATE_LOCATION_DT:
      return getLastUpdateLocationDt();

    case AGENT_TYPE:
      return getAgentType();

    case AUTHED_TYPE:
      return getAuthedType();

    case AUTHED_PERCENT:
      return getAuthedPercent();

    case AGE:
      return Integer.valueOf(getAge());

    case PROFESSION:
      return getProfession();

    case PROFESSION_STRING:
      return getProfessionString();

    case NATIVE_PLACE:
      return getNativePlace();

    case NATIVE_PLACE_STRING:
      return getNativePlaceString();

    case CREATE_DATE_TIME:
      return getCreateDateTime();

    case LOGIN_ACCOUNT:
      return getLoginAccount();

    case MEMBER_LEVEL:
      return Integer.valueOf(getMemberLevel());

    case IS_CANCEL:
      return Boolean.valueOf(isIsCancel());

    case MARKET_ONE:
      return getMarketOne();

    case IDENTITY_CARD:
      return getIdentityCard();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_ID:
      return isSetUserId();
    case NICK_NAME:
      return isSetNickName();
    case TRUE_NAME:
      return isSetTrueName();
    case SEX:
      return isSetSex();
    case SEX_STRING:
      return isSetSexString();
    case BIRTHDAY:
      return isSetBirthday();
    case PHONE:
      return isSetPhone();
    case USER_IMAGE:
      return isSetUserImage();
    case ACCOUNT_STATE:
      return isSetAccountState();
    case ACCOUNT_STATE_STRING:
      return isSetAccountStateString();
    case REMARK:
      return isSetRemark();
    case INSTANCE:
      return isSetInstance();
    case OPEN_ID:
      return isSetOpenId();
    case LAST_UPDATE_LOCATION_DT:
      return isSetLastUpdateLocationDt();
    case AGENT_TYPE:
      return isSetAgentType();
    case AUTHED_TYPE:
      return isSetAuthedType();
    case AUTHED_PERCENT:
      return isSetAuthedPercent();
    case AGE:
      return isSetAge();
    case PROFESSION:
      return isSetProfession();
    case PROFESSION_STRING:
      return isSetProfessionString();
    case NATIVE_PLACE:
      return isSetNativePlace();
    case NATIVE_PLACE_STRING:
      return isSetNativePlaceString();
    case CREATE_DATE_TIME:
      return isSetCreateDateTime();
    case LOGIN_ACCOUNT:
      return isSetLoginAccount();
    case MEMBER_LEVEL:
      return isSetMemberLevel();
    case IS_CANCEL:
      return isSetIsCancel();
    case MARKET_ONE:
      return isSetMarketOne();
    case IDENTITY_CARD:
      return isSetIdentityCard();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserInfo)
      return this.equals((UserInfo)that);
    return false;
  }

  public boolean equals(UserInfo that) {
    if (that == null)
      return false;

    boolean this_present_userId = true && this.isSetUserId();
    boolean that_present_userId = true && that.isSetUserId();
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (!this.userId.equals(that.userId))
        return false;
    }

    boolean this_present_nickName = true && this.isSetNickName();
    boolean that_present_nickName = true && that.isSetNickName();
    if (this_present_nickName || that_present_nickName) {
      if (!(this_present_nickName && that_present_nickName))
        return false;
      if (!this.nickName.equals(that.nickName))
        return false;
    }

    boolean this_present_trueName = true && this.isSetTrueName();
    boolean that_present_trueName = true && that.isSetTrueName();
    if (this_present_trueName || that_present_trueName) {
      if (!(this_present_trueName && that_present_trueName))
        return false;
      if (!this.trueName.equals(that.trueName))
        return false;
    }

    boolean this_present_sex = true && this.isSetSex();
    boolean that_present_sex = true && that.isSetSex();
    if (this_present_sex || that_present_sex) {
      if (!(this_present_sex && that_present_sex))
        return false;
      if (!this.sex.equals(that.sex))
        return false;
    }

    boolean this_present_sexString = true && this.isSetSexString();
    boolean that_present_sexString = true && that.isSetSexString();
    if (this_present_sexString || that_present_sexString) {
      if (!(this_present_sexString && that_present_sexString))
        return false;
      if (!this.sexString.equals(that.sexString))
        return false;
    }

    boolean this_present_birthday = true && this.isSetBirthday();
    boolean that_present_birthday = true && that.isSetBirthday();
    if (this_present_birthday || that_present_birthday) {
      if (!(this_present_birthday && that_present_birthday))
        return false;
      if (!this.birthday.equals(that.birthday))
        return false;
    }

    boolean this_present_phone = true && this.isSetPhone();
    boolean that_present_phone = true && that.isSetPhone();
    if (this_present_phone || that_present_phone) {
      if (!(this_present_phone && that_present_phone))
        return false;
      if (!this.phone.equals(that.phone))
        return false;
    }

    boolean this_present_userImage = true && this.isSetUserImage();
    boolean that_present_userImage = true && that.isSetUserImage();
    if (this_present_userImage || that_present_userImage) {
      if (!(this_present_userImage && that_present_userImage))
        return false;
      if (!this.userImage.equals(that.userImage))
        return false;
    }

    boolean this_present_accountState = true && this.isSetAccountState();
    boolean that_present_accountState = true && that.isSetAccountState();
    if (this_present_accountState || that_present_accountState) {
      if (!(this_present_accountState && that_present_accountState))
        return false;
      if (!this.accountState.equals(that.accountState))
        return false;
    }

    boolean this_present_accountStateString = true && this.isSetAccountStateString();
    boolean that_present_accountStateString = true && that.isSetAccountStateString();
    if (this_present_accountStateString || that_present_accountStateString) {
      if (!(this_present_accountStateString && that_present_accountStateString))
        return false;
      if (!this.accountStateString.equals(that.accountStateString))
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_instance = true;
    boolean that_present_instance = true;
    if (this_present_instance || that_present_instance) {
      if (!(this_present_instance && that_present_instance))
        return false;
      if (this.instance != that.instance)
        return false;
    }

    boolean this_present_OpenId = true && this.isSetOpenId();
    boolean that_present_OpenId = true && that.isSetOpenId();
    if (this_present_OpenId || that_present_OpenId) {
      if (!(this_present_OpenId && that_present_OpenId))
        return false;
      if (!this.OpenId.equals(that.OpenId))
        return false;
    }

    boolean this_present_lastUpdateLocationDt = true && this.isSetLastUpdateLocationDt();
    boolean that_present_lastUpdateLocationDt = true && that.isSetLastUpdateLocationDt();
    if (this_present_lastUpdateLocationDt || that_present_lastUpdateLocationDt) {
      if (!(this_present_lastUpdateLocationDt && that_present_lastUpdateLocationDt))
        return false;
      if (!this.lastUpdateLocationDt.equals(that.lastUpdateLocationDt))
        return false;
    }

    boolean this_present_agentType = true && this.isSetAgentType();
    boolean that_present_agentType = true && that.isSetAgentType();
    if (this_present_agentType || that_present_agentType) {
      if (!(this_present_agentType && that_present_agentType))
        return false;
      if (!this.agentType.equals(that.agentType))
        return false;
    }

    boolean this_present_authedType = true && this.isSetAuthedType();
    boolean that_present_authedType = true && that.isSetAuthedType();
    if (this_present_authedType || that_present_authedType) {
      if (!(this_present_authedType && that_present_authedType))
        return false;
      if (!this.authedType.equals(that.authedType))
        return false;
    }

    boolean this_present_authedPercent = true && this.isSetAuthedPercent();
    boolean that_present_authedPercent = true && that.isSetAuthedPercent();
    if (this_present_authedPercent || that_present_authedPercent) {
      if (!(this_present_authedPercent && that_present_authedPercent))
        return false;
      if (!this.authedPercent.equals(that.authedPercent))
        return false;
    }

    boolean this_present_age = true;
    boolean that_present_age = true;
    if (this_present_age || that_present_age) {
      if (!(this_present_age && that_present_age))
        return false;
      if (this.age != that.age)
        return false;
    }

    boolean this_present_profession = true && this.isSetProfession();
    boolean that_present_profession = true && that.isSetProfession();
    if (this_present_profession || that_present_profession) {
      if (!(this_present_profession && that_present_profession))
        return false;
      if (!this.profession.equals(that.profession))
        return false;
    }

    boolean this_present_professionString = true && this.isSetProfessionString();
    boolean that_present_professionString = true && that.isSetProfessionString();
    if (this_present_professionString || that_present_professionString) {
      if (!(this_present_professionString && that_present_professionString))
        return false;
      if (!this.professionString.equals(that.professionString))
        return false;
    }

    boolean this_present_nativePlace = true && this.isSetNativePlace();
    boolean that_present_nativePlace = true && that.isSetNativePlace();
    if (this_present_nativePlace || that_present_nativePlace) {
      if (!(this_present_nativePlace && that_present_nativePlace))
        return false;
      if (!this.nativePlace.equals(that.nativePlace))
        return false;
    }

    boolean this_present_nativePlaceString = true && this.isSetNativePlaceString();
    boolean that_present_nativePlaceString = true && that.isSetNativePlaceString();
    if (this_present_nativePlaceString || that_present_nativePlaceString) {
      if (!(this_present_nativePlaceString && that_present_nativePlaceString))
        return false;
      if (!this.nativePlaceString.equals(that.nativePlaceString))
        return false;
    }

    boolean this_present_createDateTime = true && this.isSetCreateDateTime();
    boolean that_present_createDateTime = true && that.isSetCreateDateTime();
    if (this_present_createDateTime || that_present_createDateTime) {
      if (!(this_present_createDateTime && that_present_createDateTime))
        return false;
      if (!this.createDateTime.equals(that.createDateTime))
        return false;
    }

    boolean this_present_loginAccount = true && this.isSetLoginAccount();
    boolean that_present_loginAccount = true && that.isSetLoginAccount();
    if (this_present_loginAccount || that_present_loginAccount) {
      if (!(this_present_loginAccount && that_present_loginAccount))
        return false;
      if (!this.loginAccount.equals(that.loginAccount))
        return false;
    }

    boolean this_present_memberLevel = true;
    boolean that_present_memberLevel = true;
    if (this_present_memberLevel || that_present_memberLevel) {
      if (!(this_present_memberLevel && that_present_memberLevel))
        return false;
      if (this.memberLevel != that.memberLevel)
        return false;
    }

    boolean this_present_isCancel = true;
    boolean that_present_isCancel = true;
    if (this_present_isCancel || that_present_isCancel) {
      if (!(this_present_isCancel && that_present_isCancel))
        return false;
      if (this.isCancel != that.isCancel)
        return false;
    }

    boolean this_present_marketOne = true && this.isSetMarketOne();
    boolean that_present_marketOne = true && that.isSetMarketOne();
    if (this_present_marketOne || that_present_marketOne) {
      if (!(this_present_marketOne && that_present_marketOne))
        return false;
      if (!this.marketOne.equals(that.marketOne))
        return false;
    }

    boolean this_present_identityCard = true && this.isSetIdentityCard();
    boolean that_present_identityCard = true && that.isSetIdentityCard();
    if (this_present_identityCard || that_present_identityCard) {
      if (!(this_present_identityCard && that_present_identityCard))
        return false;
      if (!this.identityCard.equals(that.identityCard))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(UserInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNickName()).compareTo(other.isSetNickName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNickName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nickName, other.nickName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTrueName()).compareTo(other.isSetTrueName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTrueName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trueName, other.trueName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSex()).compareTo(other.isSetSex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sex, other.sex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSexString()).compareTo(other.isSetSexString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSexString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sexString, other.sexString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBirthday()).compareTo(other.isSetBirthday());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBirthday()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.birthday, other.birthday);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhone()).compareTo(other.isSetPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phone, other.phone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserImage()).compareTo(other.isSetUserImage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserImage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userImage, other.userImage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccountState()).compareTo(other.isSetAccountState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountState, other.accountState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccountStateString()).compareTo(other.isSetAccountStateString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountStateString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountStateString, other.accountStateString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstance()).compareTo(other.isSetInstance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instance, other.instance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpenId()).compareTo(other.isSetOpenId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpenId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.OpenId, other.OpenId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastUpdateLocationDt()).compareTo(other.isSetLastUpdateLocationDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastUpdateLocationDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastUpdateLocationDt, other.lastUpdateLocationDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAgentType()).compareTo(other.isSetAgentType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAgentType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agentType, other.agentType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuthedType()).compareTo(other.isSetAuthedType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthedType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authedType, other.authedType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuthedPercent()).compareTo(other.isSetAuthedPercent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthedPercent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authedPercent, other.authedPercent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAge()).compareTo(other.isSetAge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.age, other.age);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProfession()).compareTo(other.isSetProfession());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProfession()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profession, other.profession);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProfessionString()).compareTo(other.isSetProfessionString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProfessionString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.professionString, other.professionString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNativePlace()).compareTo(other.isSetNativePlace());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNativePlace()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nativePlace, other.nativePlace);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNativePlaceString()).compareTo(other.isSetNativePlaceString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNativePlaceString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nativePlaceString, other.nativePlaceString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateDateTime()).compareTo(other.isSetCreateDateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateDateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createDateTime, other.createDateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoginAccount()).compareTo(other.isSetLoginAccount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoginAccount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginAccount, other.loginAccount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemberLevel()).compareTo(other.isSetMemberLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemberLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberLevel, other.memberLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsCancel()).compareTo(other.isSetIsCancel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsCancel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isCancel, other.isCancel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMarketOne()).compareTo(other.isSetMarketOne());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMarketOne()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.marketOne, other.marketOne);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdentityCard()).compareTo(other.isSetIdentityCard());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdentityCard()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identityCard, other.identityCard);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserInfo(");
    boolean first = true;

    sb.append("userId:");
    if (this.userId == null) {
      sb.append("null");
    } else {
      sb.append(this.userId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nickName:");
    if (this.nickName == null) {
      sb.append("null");
    } else {
      sb.append(this.nickName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("trueName:");
    if (this.trueName == null) {
      sb.append("null");
    } else {
      sb.append(this.trueName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sex:");
    if (this.sex == null) {
      sb.append("null");
    } else {
      sb.append(this.sex);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sexString:");
    if (this.sexString == null) {
      sb.append("null");
    } else {
      sb.append(this.sexString);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("birthday:");
    if (this.birthday == null) {
      sb.append("null");
    } else {
      sb.append(this.birthday);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("phone:");
    if (this.phone == null) {
      sb.append("null");
    } else {
      sb.append(this.phone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userImage:");
    if (this.userImage == null) {
      sb.append("null");
    } else {
      sb.append(this.userImage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("accountState:");
    if (this.accountState == null) {
      sb.append("null");
    } else {
      sb.append(this.accountState);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("accountStateString:");
    if (this.accountStateString == null) {
      sb.append("null");
    } else {
      sb.append(this.accountStateString);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("instance:");
    sb.append(this.instance);
    first = false;
    if (!first) sb.append(", ");
    sb.append("OpenId:");
    if (this.OpenId == null) {
      sb.append("null");
    } else {
      sb.append(this.OpenId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastUpdateLocationDt:");
    if (this.lastUpdateLocationDt == null) {
      sb.append("null");
    } else {
      sb.append(this.lastUpdateLocationDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("agentType:");
    if (this.agentType == null) {
      sb.append("null");
    } else {
      sb.append(this.agentType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("authedType:");
    if (this.authedType == null) {
      sb.append("null");
    } else {
      sb.append(this.authedType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("authedPercent:");
    if (this.authedPercent == null) {
      sb.append("null");
    } else {
      sb.append(this.authedPercent);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("age:");
    sb.append(this.age);
    first = false;
    if (!first) sb.append(", ");
    sb.append("profession:");
    if (this.profession == null) {
      sb.append("null");
    } else {
      sb.append(this.profession);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("professionString:");
    if (this.professionString == null) {
      sb.append("null");
    } else {
      sb.append(this.professionString);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nativePlace:");
    if (this.nativePlace == null) {
      sb.append("null");
    } else {
      sb.append(this.nativePlace);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nativePlaceString:");
    if (this.nativePlaceString == null) {
      sb.append("null");
    } else {
      sb.append(this.nativePlaceString);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createDateTime:");
    if (this.createDateTime == null) {
      sb.append("null");
    } else {
      sb.append(this.createDateTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loginAccount:");
    if (this.loginAccount == null) {
      sb.append("null");
    } else {
      sb.append(this.loginAccount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("memberLevel:");
    sb.append(this.memberLevel);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isCancel:");
    sb.append(this.isCancel);
    first = false;
    if (!first) sb.append(", ");
    sb.append("marketOne:");
    if (this.marketOne == null) {
      sb.append("null");
    } else {
      sb.append(this.marketOne);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("identityCard:");
    if (this.identityCard == null) {
      sb.append("null");
    } else {
      sb.append(this.identityCard);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserInfoStandardSchemeFactory implements SchemeFactory {
    public UserInfoStandardScheme getScheme() {
      return new UserInfoStandardScheme();
    }
  }

  private static class UserInfoStandardScheme extends StandardScheme<UserInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userId = iprot.readString();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NICK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nickName = iprot.readString();
              struct.setNickNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TRUE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.trueName = iprot.readString();
              struct.setTrueNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sex = SexTypeEnum.findByValue(iprot.readI32());
              struct.setSexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SEX_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sexString = iprot.readString();
              struct.setSexStringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BIRTHDAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.birthday = iprot.readString();
              struct.setBirthdayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.phone = iprot.readString();
              struct.setPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // USER_IMAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userImage = iprot.readString();
              struct.setUserImageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ACCOUNT_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.accountState = AccountStateEnum.findByValue(iprot.readI32());
              struct.setAccountStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ACCOUNT_STATE_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accountStateString = iprot.readString();
              struct.setAccountStateStringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // INSTANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.instance = iprot.readDouble();
              struct.setInstanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // OPEN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.OpenId = iprot.readString();
              struct.setOpenIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // LAST_UPDATE_LOCATION_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastUpdateLocationDt = iprot.readString();
              struct.setLastUpdateLocationDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // AGENT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.agentType = AgentType.findByValue(iprot.readI32());
              struct.setAgentTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // AUTHED_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.authedType = AuthedType.findByValue(iprot.readI32());
              struct.setAuthedTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // AUTHED_PERCENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.authedPercent = iprot.readString();
              struct.setAuthedPercentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // AGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.age = iprot.readI32();
              struct.setAgeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // PROFESSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.profession = iprot.readString();
              struct.setProfessionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // PROFESSION_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.professionString = iprot.readString();
              struct.setProfessionStringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // NATIVE_PLACE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nativePlace = iprot.readString();
              struct.setNativePlaceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // NATIVE_PLACE_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nativePlaceString = iprot.readString();
              struct.setNativePlaceStringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // CREATE_DATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createDateTime = iprot.readString();
              struct.setCreateDateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // LOGIN_ACCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loginAccount = iprot.readString();
              struct.setLoginAccountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // MEMBER_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.memberLevel = iprot.readI32();
              struct.setMemberLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // IS_CANCEL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isCancel = iprot.readBool();
              struct.setIsCancelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // MARKET_ONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.marketOne = iprot.readString();
              struct.setMarketOneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // IDENTITY_CARD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.identityCard = iprot.readString();
              struct.setIdentityCardIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.userId != null) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeString(struct.userId);
        oprot.writeFieldEnd();
      }
      if (struct.nickName != null) {
        oprot.writeFieldBegin(NICK_NAME_FIELD_DESC);
        oprot.writeString(struct.nickName);
        oprot.writeFieldEnd();
      }
      if (struct.trueName != null) {
        oprot.writeFieldBegin(TRUE_NAME_FIELD_DESC);
        oprot.writeString(struct.trueName);
        oprot.writeFieldEnd();
      }
      if (struct.sex != null) {
        oprot.writeFieldBegin(SEX_FIELD_DESC);
        oprot.writeI32(struct.sex.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.sexString != null) {
        oprot.writeFieldBegin(SEX_STRING_FIELD_DESC);
        oprot.writeString(struct.sexString);
        oprot.writeFieldEnd();
      }
      if (struct.birthday != null) {
        oprot.writeFieldBegin(BIRTHDAY_FIELD_DESC);
        oprot.writeString(struct.birthday);
        oprot.writeFieldEnd();
      }
      if (struct.phone != null) {
        oprot.writeFieldBegin(PHONE_FIELD_DESC);
        oprot.writeString(struct.phone);
        oprot.writeFieldEnd();
      }
      if (struct.userImage != null) {
        oprot.writeFieldBegin(USER_IMAGE_FIELD_DESC);
        oprot.writeString(struct.userImage);
        oprot.writeFieldEnd();
      }
      if (struct.accountState != null) {
        oprot.writeFieldBegin(ACCOUNT_STATE_FIELD_DESC);
        oprot.writeI32(struct.accountState.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.accountStateString != null) {
        oprot.writeFieldBegin(ACCOUNT_STATE_STRING_FIELD_DESC);
        oprot.writeString(struct.accountStateString);
        oprot.writeFieldEnd();
      }
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INSTANCE_FIELD_DESC);
      oprot.writeDouble(struct.instance);
      oprot.writeFieldEnd();
      if (struct.OpenId != null) {
        oprot.writeFieldBegin(OPEN_ID_FIELD_DESC);
        oprot.writeString(struct.OpenId);
        oprot.writeFieldEnd();
      }
      if (struct.lastUpdateLocationDt != null) {
        oprot.writeFieldBegin(LAST_UPDATE_LOCATION_DT_FIELD_DESC);
        oprot.writeString(struct.lastUpdateLocationDt);
        oprot.writeFieldEnd();
      }
      if (struct.agentType != null) {
        oprot.writeFieldBegin(AGENT_TYPE_FIELD_DESC);
        oprot.writeI32(struct.agentType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.authedType != null) {
        oprot.writeFieldBegin(AUTHED_TYPE_FIELD_DESC);
        oprot.writeI32(struct.authedType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.authedPercent != null) {
        oprot.writeFieldBegin(AUTHED_PERCENT_FIELD_DESC);
        oprot.writeString(struct.authedPercent);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(AGE_FIELD_DESC);
      oprot.writeI32(struct.age);
      oprot.writeFieldEnd();
      if (struct.profession != null) {
        oprot.writeFieldBegin(PROFESSION_FIELD_DESC);
        oprot.writeString(struct.profession);
        oprot.writeFieldEnd();
      }
      if (struct.professionString != null) {
        oprot.writeFieldBegin(PROFESSION_STRING_FIELD_DESC);
        oprot.writeString(struct.professionString);
        oprot.writeFieldEnd();
      }
      if (struct.nativePlace != null) {
        oprot.writeFieldBegin(NATIVE_PLACE_FIELD_DESC);
        oprot.writeString(struct.nativePlace);
        oprot.writeFieldEnd();
      }
      if (struct.nativePlaceString != null) {
        oprot.writeFieldBegin(NATIVE_PLACE_STRING_FIELD_DESC);
        oprot.writeString(struct.nativePlaceString);
        oprot.writeFieldEnd();
      }
      if (struct.createDateTime != null) {
        oprot.writeFieldBegin(CREATE_DATE_TIME_FIELD_DESC);
        oprot.writeString(struct.createDateTime);
        oprot.writeFieldEnd();
      }
      if (struct.loginAccount != null) {
        oprot.writeFieldBegin(LOGIN_ACCOUNT_FIELD_DESC);
        oprot.writeString(struct.loginAccount);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MEMBER_LEVEL_FIELD_DESC);
      oprot.writeI32(struct.memberLevel);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_CANCEL_FIELD_DESC);
      oprot.writeBool(struct.isCancel);
      oprot.writeFieldEnd();
      if (struct.marketOne != null) {
        oprot.writeFieldBegin(MARKET_ONE_FIELD_DESC);
        oprot.writeString(struct.marketOne);
        oprot.writeFieldEnd();
      }
      if (struct.identityCard != null) {
        oprot.writeFieldBegin(IDENTITY_CARD_FIELD_DESC);
        oprot.writeString(struct.identityCard);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserInfoTupleSchemeFactory implements SchemeFactory {
    public UserInfoTupleScheme getScheme() {
      return new UserInfoTupleScheme();
    }
  }

  private static class UserInfoTupleScheme extends TupleScheme<UserInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUserId()) {
        optionals.set(0);
      }
      if (struct.isSetNickName()) {
        optionals.set(1);
      }
      if (struct.isSetTrueName()) {
        optionals.set(2);
      }
      if (struct.isSetSex()) {
        optionals.set(3);
      }
      if (struct.isSetSexString()) {
        optionals.set(4);
      }
      if (struct.isSetBirthday()) {
        optionals.set(5);
      }
      if (struct.isSetPhone()) {
        optionals.set(6);
      }
      if (struct.isSetUserImage()) {
        optionals.set(7);
      }
      if (struct.isSetAccountState()) {
        optionals.set(8);
      }
      if (struct.isSetAccountStateString()) {
        optionals.set(9);
      }
      if (struct.isSetRemark()) {
        optionals.set(10);
      }
      if (struct.isSetInstance()) {
        optionals.set(11);
      }
      if (struct.isSetOpenId()) {
        optionals.set(12);
      }
      if (struct.isSetLastUpdateLocationDt()) {
        optionals.set(13);
      }
      if (struct.isSetAgentType()) {
        optionals.set(14);
      }
      if (struct.isSetAuthedType()) {
        optionals.set(15);
      }
      if (struct.isSetAuthedPercent()) {
        optionals.set(16);
      }
      if (struct.isSetAge()) {
        optionals.set(17);
      }
      if (struct.isSetProfession()) {
        optionals.set(18);
      }
      if (struct.isSetProfessionString()) {
        optionals.set(19);
      }
      if (struct.isSetNativePlace()) {
        optionals.set(20);
      }
      if (struct.isSetNativePlaceString()) {
        optionals.set(21);
      }
      if (struct.isSetCreateDateTime()) {
        optionals.set(22);
      }
      if (struct.isSetLoginAccount()) {
        optionals.set(23);
      }
      if (struct.isSetMemberLevel()) {
        optionals.set(24);
      }
      if (struct.isSetIsCancel()) {
        optionals.set(25);
      }
      if (struct.isSetMarketOne()) {
        optionals.set(26);
      }
      if (struct.isSetIdentityCard()) {
        optionals.set(27);
      }
      oprot.writeBitSet(optionals, 28);
      if (struct.isSetUserId()) {
        oprot.writeString(struct.userId);
      }
      if (struct.isSetNickName()) {
        oprot.writeString(struct.nickName);
      }
      if (struct.isSetTrueName()) {
        oprot.writeString(struct.trueName);
      }
      if (struct.isSetSex()) {
        oprot.writeI32(struct.sex.getValue());
      }
      if (struct.isSetSexString()) {
        oprot.writeString(struct.sexString);
      }
      if (struct.isSetBirthday()) {
        oprot.writeString(struct.birthday);
      }
      if (struct.isSetPhone()) {
        oprot.writeString(struct.phone);
      }
      if (struct.isSetUserImage()) {
        oprot.writeString(struct.userImage);
      }
      if (struct.isSetAccountState()) {
        oprot.writeI32(struct.accountState.getValue());
      }
      if (struct.isSetAccountStateString()) {
        oprot.writeString(struct.accountStateString);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetInstance()) {
        oprot.writeDouble(struct.instance);
      }
      if (struct.isSetOpenId()) {
        oprot.writeString(struct.OpenId);
      }
      if (struct.isSetLastUpdateLocationDt()) {
        oprot.writeString(struct.lastUpdateLocationDt);
      }
      if (struct.isSetAgentType()) {
        oprot.writeI32(struct.agentType.getValue());
      }
      if (struct.isSetAuthedType()) {
        oprot.writeI32(struct.authedType.getValue());
      }
      if (struct.isSetAuthedPercent()) {
        oprot.writeString(struct.authedPercent);
      }
      if (struct.isSetAge()) {
        oprot.writeI32(struct.age);
      }
      if (struct.isSetProfession()) {
        oprot.writeString(struct.profession);
      }
      if (struct.isSetProfessionString()) {
        oprot.writeString(struct.professionString);
      }
      if (struct.isSetNativePlace()) {
        oprot.writeString(struct.nativePlace);
      }
      if (struct.isSetNativePlaceString()) {
        oprot.writeString(struct.nativePlaceString);
      }
      if (struct.isSetCreateDateTime()) {
        oprot.writeString(struct.createDateTime);
      }
      if (struct.isSetLoginAccount()) {
        oprot.writeString(struct.loginAccount);
      }
      if (struct.isSetMemberLevel()) {
        oprot.writeI32(struct.memberLevel);
      }
      if (struct.isSetIsCancel()) {
        oprot.writeBool(struct.isCancel);
      }
      if (struct.isSetMarketOne()) {
        oprot.writeString(struct.marketOne);
      }
      if (struct.isSetIdentityCard()) {
        oprot.writeString(struct.identityCard);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(28);
      if (incoming.get(0)) {
        struct.userId = iprot.readString();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.nickName = iprot.readString();
        struct.setNickNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.trueName = iprot.readString();
        struct.setTrueNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.sex = SexTypeEnum.findByValue(iprot.readI32());
        struct.setSexIsSet(true);
      }
      if (incoming.get(4)) {
        struct.sexString = iprot.readString();
        struct.setSexStringIsSet(true);
      }
      if (incoming.get(5)) {
        struct.birthday = iprot.readString();
        struct.setBirthdayIsSet(true);
      }
      if (incoming.get(6)) {
        struct.phone = iprot.readString();
        struct.setPhoneIsSet(true);
      }
      if (incoming.get(7)) {
        struct.userImage = iprot.readString();
        struct.setUserImageIsSet(true);
      }
      if (incoming.get(8)) {
        struct.accountState = AccountStateEnum.findByValue(iprot.readI32());
        struct.setAccountStateIsSet(true);
      }
      if (incoming.get(9)) {
        struct.accountStateString = iprot.readString();
        struct.setAccountStateStringIsSet(true);
      }
      if (incoming.get(10)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(11)) {
        struct.instance = iprot.readDouble();
        struct.setInstanceIsSet(true);
      }
      if (incoming.get(12)) {
        struct.OpenId = iprot.readString();
        struct.setOpenIdIsSet(true);
      }
      if (incoming.get(13)) {
        struct.lastUpdateLocationDt = iprot.readString();
        struct.setLastUpdateLocationDtIsSet(true);
      }
      if (incoming.get(14)) {
        struct.agentType = AgentType.findByValue(iprot.readI32());
        struct.setAgentTypeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.authedType = AuthedType.findByValue(iprot.readI32());
        struct.setAuthedTypeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.authedPercent = iprot.readString();
        struct.setAuthedPercentIsSet(true);
      }
      if (incoming.get(17)) {
        struct.age = iprot.readI32();
        struct.setAgeIsSet(true);
      }
      if (incoming.get(18)) {
        struct.profession = iprot.readString();
        struct.setProfessionIsSet(true);
      }
      if (incoming.get(19)) {
        struct.professionString = iprot.readString();
        struct.setProfessionStringIsSet(true);
      }
      if (incoming.get(20)) {
        struct.nativePlace = iprot.readString();
        struct.setNativePlaceIsSet(true);
      }
      if (incoming.get(21)) {
        struct.nativePlaceString = iprot.readString();
        struct.setNativePlaceStringIsSet(true);
      }
      if (incoming.get(22)) {
        struct.createDateTime = iprot.readString();
        struct.setCreateDateTimeIsSet(true);
      }
      if (incoming.get(23)) {
        struct.loginAccount = iprot.readString();
        struct.setLoginAccountIsSet(true);
      }
      if (incoming.get(24)) {
        struct.memberLevel = iprot.readI32();
        struct.setMemberLevelIsSet(true);
      }
      if (incoming.get(25)) {
        struct.isCancel = iprot.readBool();
        struct.setIsCancelIsSet(true);
      }
      if (incoming.get(26)) {
        struct.marketOne = iprot.readString();
        struct.setMarketOneIsSet(true);
      }
      if (incoming.get(27)) {
        struct.identityCard = iprot.readString();
        struct.setIdentityCardIsSet(true);
      }
    }
  }

}

