/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ly.driver;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class AppInfo implements org.apache.thrift.TBase<AppInfo, AppInfo._Fields>, java.io.Serializable, Cloneable, Comparable<AppInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppInfo");

  private static final org.apache.thrift.protocol.TField APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField APP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("appName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField APP_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("appKey", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField APP_SECRET_FIELD_DESC = new org.apache.thrift.protocol.TField("appSecret", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CALL_BACK_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("callBackUrl", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CANCEL_CALL_BACK_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("cancelCallBackUrl", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AppInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AppInfoTupleSchemeFactory());
  }

  public String appId; // required
  public String appName; // required
  public String appKey; // required
  public String appSecret; // required
  public String callBackUrl; // required
  public String cancelCallBackUrl; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    APP_ID((short)1, "appId"),
    APP_NAME((short)2, "appName"),
    APP_KEY((short)3, "appKey"),
    APP_SECRET((short)4, "appSecret"),
    CALL_BACK_URL((short)5, "callBackUrl"),
    CANCEL_CALL_BACK_URL((short)6, "cancelCallBackUrl");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // APP_ID
          return APP_ID;
        case 2: // APP_NAME
          return APP_NAME;
        case 3: // APP_KEY
          return APP_KEY;
        case 4: // APP_SECRET
          return APP_SECRET;
        case 5: // CALL_BACK_URL
          return CALL_BACK_URL;
        case 6: // CANCEL_CALL_BACK_URL
          return CANCEL_CALL_BACK_URL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.APP_ID, new org.apache.thrift.meta_data.FieldMetaData("appId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APP_NAME, new org.apache.thrift.meta_data.FieldMetaData("appName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APP_KEY, new org.apache.thrift.meta_data.FieldMetaData("appKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APP_SECRET, new org.apache.thrift.meta_data.FieldMetaData("appSecret", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CALL_BACK_URL, new org.apache.thrift.meta_data.FieldMetaData("callBackUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CANCEL_CALL_BACK_URL, new org.apache.thrift.meta_data.FieldMetaData("cancelCallBackUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AppInfo.class, metaDataMap);
  }

  public AppInfo() {
  }

  public AppInfo(
    String appId,
    String appName,
    String appKey,
    String appSecret,
    String callBackUrl,
    String cancelCallBackUrl)
  {
    this();
    this.appId = appId;
    this.appName = appName;
    this.appKey = appKey;
    this.appSecret = appSecret;
    this.callBackUrl = callBackUrl;
    this.cancelCallBackUrl = cancelCallBackUrl;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AppInfo(AppInfo other) {
    if (other.isSetAppId()) {
      this.appId = other.appId;
    }
    if (other.isSetAppName()) {
      this.appName = other.appName;
    }
    if (other.isSetAppKey()) {
      this.appKey = other.appKey;
    }
    if (other.isSetAppSecret()) {
      this.appSecret = other.appSecret;
    }
    if (other.isSetCallBackUrl()) {
      this.callBackUrl = other.callBackUrl;
    }
    if (other.isSetCancelCallBackUrl()) {
      this.cancelCallBackUrl = other.cancelCallBackUrl;
    }
  }

  public AppInfo deepCopy() {
    return new AppInfo(this);
  }

  @Override
  public void clear() {
    this.appId = null;
    this.appName = null;
    this.appKey = null;
    this.appSecret = null;
    this.callBackUrl = null;
    this.cancelCallBackUrl = null;
  }

  public String getAppId() {
    return this.appId;
  }

  public AppInfo setAppId(String appId) {
    this.appId = appId;
    return this;
  }

  public void unsetAppId() {
    this.appId = null;
  }

  /** Returns true if field appId is set (has been assigned a value) and false otherwise */
  public boolean isSetAppId() {
    return this.appId != null;
  }

  public void setAppIdIsSet(boolean value) {
    if (!value) {
      this.appId = null;
    }
  }

  public String getAppName() {
    return this.appName;
  }

  public AppInfo setAppName(String appName) {
    this.appName = appName;
    return this;
  }

  public void unsetAppName() {
    this.appName = null;
  }

  /** Returns true if field appName is set (has been assigned a value) and false otherwise */
  public boolean isSetAppName() {
    return this.appName != null;
  }

  public void setAppNameIsSet(boolean value) {
    if (!value) {
      this.appName = null;
    }
  }

  public String getAppKey() {
    return this.appKey;
  }

  public AppInfo setAppKey(String appKey) {
    this.appKey = appKey;
    return this;
  }

  public void unsetAppKey() {
    this.appKey = null;
  }

  /** Returns true if field appKey is set (has been assigned a value) and false otherwise */
  public boolean isSetAppKey() {
    return this.appKey != null;
  }

  public void setAppKeyIsSet(boolean value) {
    if (!value) {
      this.appKey = null;
    }
  }

  public String getAppSecret() {
    return this.appSecret;
  }

  public AppInfo setAppSecret(String appSecret) {
    this.appSecret = appSecret;
    return this;
  }

  public void unsetAppSecret() {
    this.appSecret = null;
  }

  /** Returns true if field appSecret is set (has been assigned a value) and false otherwise */
  public boolean isSetAppSecret() {
    return this.appSecret != null;
  }

  public void setAppSecretIsSet(boolean value) {
    if (!value) {
      this.appSecret = null;
    }
  }

  public String getCallBackUrl() {
    return this.callBackUrl;
  }

  public AppInfo setCallBackUrl(String callBackUrl) {
    this.callBackUrl = callBackUrl;
    return this;
  }

  public void unsetCallBackUrl() {
    this.callBackUrl = null;
  }

  /** Returns true if field callBackUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetCallBackUrl() {
    return this.callBackUrl != null;
  }

  public void setCallBackUrlIsSet(boolean value) {
    if (!value) {
      this.callBackUrl = null;
    }
  }

  public String getCancelCallBackUrl() {
    return this.cancelCallBackUrl;
  }

  public AppInfo setCancelCallBackUrl(String cancelCallBackUrl) {
    this.cancelCallBackUrl = cancelCallBackUrl;
    return this;
  }

  public void unsetCancelCallBackUrl() {
    this.cancelCallBackUrl = null;
  }

  /** Returns true if field cancelCallBackUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetCancelCallBackUrl() {
    return this.cancelCallBackUrl != null;
  }

  public void setCancelCallBackUrlIsSet(boolean value) {
    if (!value) {
      this.cancelCallBackUrl = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case APP_ID:
      if (value == null) {
        unsetAppId();
      } else {
        setAppId((String)value);
      }
      break;

    case APP_NAME:
      if (value == null) {
        unsetAppName();
      } else {
        setAppName((String)value);
      }
      break;

    case APP_KEY:
      if (value == null) {
        unsetAppKey();
      } else {
        setAppKey((String)value);
      }
      break;

    case APP_SECRET:
      if (value == null) {
        unsetAppSecret();
      } else {
        setAppSecret((String)value);
      }
      break;

    case CALL_BACK_URL:
      if (value == null) {
        unsetCallBackUrl();
      } else {
        setCallBackUrl((String)value);
      }
      break;

    case CANCEL_CALL_BACK_URL:
      if (value == null) {
        unsetCancelCallBackUrl();
      } else {
        setCancelCallBackUrl((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case APP_ID:
      return getAppId();

    case APP_NAME:
      return getAppName();

    case APP_KEY:
      return getAppKey();

    case APP_SECRET:
      return getAppSecret();

    case CALL_BACK_URL:
      return getCallBackUrl();

    case CANCEL_CALL_BACK_URL:
      return getCancelCallBackUrl();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case APP_ID:
      return isSetAppId();
    case APP_NAME:
      return isSetAppName();
    case APP_KEY:
      return isSetAppKey();
    case APP_SECRET:
      return isSetAppSecret();
    case CALL_BACK_URL:
      return isSetCallBackUrl();
    case CANCEL_CALL_BACK_URL:
      return isSetCancelCallBackUrl();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AppInfo)
      return this.equals((AppInfo)that);
    return false;
  }

  public boolean equals(AppInfo that) {
    if (that == null)
      return false;

    boolean this_present_appId = true && this.isSetAppId();
    boolean that_present_appId = true && that.isSetAppId();
    if (this_present_appId || that_present_appId) {
      if (!(this_present_appId && that_present_appId))
        return false;
      if (!this.appId.equals(that.appId))
        return false;
    }

    boolean this_present_appName = true && this.isSetAppName();
    boolean that_present_appName = true && that.isSetAppName();
    if (this_present_appName || that_present_appName) {
      if (!(this_present_appName && that_present_appName))
        return false;
      if (!this.appName.equals(that.appName))
        return false;
    }

    boolean this_present_appKey = true && this.isSetAppKey();
    boolean that_present_appKey = true && that.isSetAppKey();
    if (this_present_appKey || that_present_appKey) {
      if (!(this_present_appKey && that_present_appKey))
        return false;
      if (!this.appKey.equals(that.appKey))
        return false;
    }

    boolean this_present_appSecret = true && this.isSetAppSecret();
    boolean that_present_appSecret = true && that.isSetAppSecret();
    if (this_present_appSecret || that_present_appSecret) {
      if (!(this_present_appSecret && that_present_appSecret))
        return false;
      if (!this.appSecret.equals(that.appSecret))
        return false;
    }

    boolean this_present_callBackUrl = true && this.isSetCallBackUrl();
    boolean that_present_callBackUrl = true && that.isSetCallBackUrl();
    if (this_present_callBackUrl || that_present_callBackUrl) {
      if (!(this_present_callBackUrl && that_present_callBackUrl))
        return false;
      if (!this.callBackUrl.equals(that.callBackUrl))
        return false;
    }

    boolean this_present_cancelCallBackUrl = true && this.isSetCancelCallBackUrl();
    boolean that_present_cancelCallBackUrl = true && that.isSetCancelCallBackUrl();
    if (this_present_cancelCallBackUrl || that_present_cancelCallBackUrl) {
      if (!(this_present_cancelCallBackUrl && that_present_cancelCallBackUrl))
        return false;
      if (!this.cancelCallBackUrl.equals(that.cancelCallBackUrl))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(AppInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAppId()).compareTo(other.isSetAppId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appId, other.appId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppName()).compareTo(other.isSetAppName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appName, other.appName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppKey()).compareTo(other.isSetAppKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appKey, other.appKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppSecret()).compareTo(other.isSetAppSecret());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppSecret()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appSecret, other.appSecret);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCallBackUrl()).compareTo(other.isSetCallBackUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCallBackUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.callBackUrl, other.callBackUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCancelCallBackUrl()).compareTo(other.isSetCancelCallBackUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCancelCallBackUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cancelCallBackUrl, other.cancelCallBackUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AppInfo(");
    boolean first = true;

    sb.append("appId:");
    if (this.appId == null) {
      sb.append("null");
    } else {
      sb.append(this.appId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("appName:");
    if (this.appName == null) {
      sb.append("null");
    } else {
      sb.append(this.appName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("appKey:");
    if (this.appKey == null) {
      sb.append("null");
    } else {
      sb.append(this.appKey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("appSecret:");
    if (this.appSecret == null) {
      sb.append("null");
    } else {
      sb.append(this.appSecret);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("callBackUrl:");
    if (this.callBackUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.callBackUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cancelCallBackUrl:");
    if (this.cancelCallBackUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.cancelCallBackUrl);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AppInfoStandardSchemeFactory implements SchemeFactory {
    public AppInfoStandardScheme getScheme() {
      return new AppInfoStandardScheme();
    }
  }

  private static class AppInfoStandardScheme extends StandardScheme<AppInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AppInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // APP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appId = iprot.readString();
              struct.setAppIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // APP_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appName = iprot.readString();
              struct.setAppNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // APP_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appKey = iprot.readString();
              struct.setAppKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // APP_SECRET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appSecret = iprot.readString();
              struct.setAppSecretIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CALL_BACK_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.callBackUrl = iprot.readString();
              struct.setCallBackUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CANCEL_CALL_BACK_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cancelCallBackUrl = iprot.readString();
              struct.setCancelCallBackUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AppInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.appId != null) {
        oprot.writeFieldBegin(APP_ID_FIELD_DESC);
        oprot.writeString(struct.appId);
        oprot.writeFieldEnd();
      }
      if (struct.appName != null) {
        oprot.writeFieldBegin(APP_NAME_FIELD_DESC);
        oprot.writeString(struct.appName);
        oprot.writeFieldEnd();
      }
      if (struct.appKey != null) {
        oprot.writeFieldBegin(APP_KEY_FIELD_DESC);
        oprot.writeString(struct.appKey);
        oprot.writeFieldEnd();
      }
      if (struct.appSecret != null) {
        oprot.writeFieldBegin(APP_SECRET_FIELD_DESC);
        oprot.writeString(struct.appSecret);
        oprot.writeFieldEnd();
      }
      if (struct.callBackUrl != null) {
        oprot.writeFieldBegin(CALL_BACK_URL_FIELD_DESC);
        oprot.writeString(struct.callBackUrl);
        oprot.writeFieldEnd();
      }
      if (struct.cancelCallBackUrl != null) {
        oprot.writeFieldBegin(CANCEL_CALL_BACK_URL_FIELD_DESC);
        oprot.writeString(struct.cancelCallBackUrl);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AppInfoTupleSchemeFactory implements SchemeFactory {
    public AppInfoTupleScheme getScheme() {
      return new AppInfoTupleScheme();
    }
  }

  private static class AppInfoTupleScheme extends TupleScheme<AppInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AppInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAppId()) {
        optionals.set(0);
      }
      if (struct.isSetAppName()) {
        optionals.set(1);
      }
      if (struct.isSetAppKey()) {
        optionals.set(2);
      }
      if (struct.isSetAppSecret()) {
        optionals.set(3);
      }
      if (struct.isSetCallBackUrl()) {
        optionals.set(4);
      }
      if (struct.isSetCancelCallBackUrl()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetAppId()) {
        oprot.writeString(struct.appId);
      }
      if (struct.isSetAppName()) {
        oprot.writeString(struct.appName);
      }
      if (struct.isSetAppKey()) {
        oprot.writeString(struct.appKey);
      }
      if (struct.isSetAppSecret()) {
        oprot.writeString(struct.appSecret);
      }
      if (struct.isSetCallBackUrl()) {
        oprot.writeString(struct.callBackUrl);
      }
      if (struct.isSetCancelCallBackUrl()) {
        oprot.writeString(struct.cancelCallBackUrl);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AppInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.appId = iprot.readString();
        struct.setAppIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.appName = iprot.readString();
        struct.setAppNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.appKey = iprot.readString();
        struct.setAppKeyIsSet(true);
      }
      if (incoming.get(3)) {
        struct.appSecret = iprot.readString();
        struct.setAppSecretIsSet(true);
      }
      if (incoming.get(4)) {
        struct.callBackUrl = iprot.readString();
        struct.setCallBackUrlIsSet(true);
      }
      if (incoming.get(5)) {
        struct.cancelCallBackUrl = iprot.readString();
        struct.setCancelCallBackUrlIsSet(true);
      }
    }
  }

}

